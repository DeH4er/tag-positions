{ Error: Request failed with status code 500
    at createError (/home/embiq/Projects/fake-bwm/node_modules/axios/lib/core/createError.js:16:15)
    at settle (/home/embiq/Projects/fake-bwm/node_modules/axios/lib/core/settle.js:18:12)
    at IncomingMessage.handleStreamEnd (/home/embiq/Projects/fake-bwm/node_modules/axios/lib/adapters/http.js:201:11)
    at IncomingMessage.emit (events.js:187:15)
    at endReadableNT (_stream_readable.js:1098:12)
    at process.internalTickCallback (internal/process/next_tick.js:72:19)
  config:
   { adapter: [Function: httpAdapter],
     transformRequest: { '0': [Function: transformRequest] },
     transformResponse: { '0': [Function: transformResponse] },
     timeout: 0,
     xsrfCookieName: 'XSRF-TOKEN',
     xsrfHeaderName: 'X-XSRF-TOKEN',
     maxContentLength: -1,
     validateStatus: [Function: validateStatus],
     headers:
      { Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json;charset=utf-8',
        'User-Agent': 'axios/0.18.0',
        'Content-Length': 40 },
     method: 'post',
     url: 'https://spark.embiq.com/api/config/tag_positions',
     data: '{"devaddr":"TAG1","data":"00C201C50000"}' },
  request:
   ClientRequest {
     _events:
      [Object: null prototype] {
        socket: [Function],
        abort: [Function],
        aborted: [Function],
        error: [Function],
        timeout: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 6,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      TLSSocket {
        _tlsOptions:
         { pipe: false,
           secureContext: SecureContext { context: SecureContext {}, singleUse: true },
           isServer: false,
           requestCert: true,
           rejectUnauthorized: true,
           session: undefined,
           ALPNProtocols: undefined,
           requestOCSP: undefined },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'spark.embiq.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events:
         [Object: null prototype] {
           close:
            [ [Function: onSocketCloseDestroySSL],
              { [Function: bound onceWrapper] listener: [Function] },
              [Function: onClose],
              [Function: socketCloseListener] ],
           end: [Function: onReadableStreamEnd],
           secure: [Function: onConnectSecure],
           free: [Function: onFree],
           agentRemove: [Function: onRemove],
           drain: [Function: ondrain],
           error: [Function: socketErrorListener],
           finish:
            { [Function: bound onceWrapper] listener: [Function: destroy] } },
        _eventsCount: 8,
        connecting: false,
        _hadError: false,
        _handle:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              onread: null,
              onconnection: null,
              [Symbol(owner)]: [Circular] },
           _parentWrap: undefined,
           _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
           reading: true,
           onread: [Function: onStreamRead],
           onhandshakestart: [Function: noop],
           onhandshakedone: [Function: bound ],
           onocspresponse: [Function: onocspresponse],
           onerror: [Function: onerror],
           [Symbol(owner)]: [Circular] },
        _parent: null,
        _host: 'spark.embiq.com',
        _readableState:
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           emitClose: false,
           autoDestroy: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        _maxListeners: undefined,
        _writableState:
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: true,
           needDrain: false,
           ending: true,
           ended: true,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: false,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 1,
           prefinished: false,
           errorEmitted: false,
           emitClose: false,
           autoDestroy: false,
           bufferedRequestCount: 0,
           corkedRequestsFree:
            { next:
               { next: null,
                 entry: null,
                 finish: [Function: bound onCorkedFinish] },
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              onread: null,
              onconnection: null,
              [Symbol(owner)]: [Circular] },
           _parentWrap: undefined,
           _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
           reading: true,
           onread: [Function: onStreamRead],
           onhandshakestart: [Function: noop],
           onhandshakedone: [Function: bound ],
           onocspresponse: [Function: onocspresponse],
           onerror: [Function: onerror],
           [Symbol(owner)]: [Circular] },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular],
        [Symbol(res)]:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              onread: null,
              onconnection: null,
              [Symbol(owner)]: [Circular] },
           _parentWrap: undefined,
           _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
           reading: true,
           onread: [Function: onStreamRead],
           onhandshakestart: [Function: noop],
           onhandshakedone: [Function: bound ],
           onocspresponse: [Function: onocspresponse],
           onerror: [Function: onerror],
           [Symbol(owner)]: [Circular] },
        [Symbol(asyncId)]: 7,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]:
         { rejectUnauthorized: true,
           ciphers:
            'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
           checkServerIdentity: [Function: checkServerIdentity],
           minDHSize: 1024,
           encoding: null,
           _agentKey: 'spark.embiq.com:443::::::::::::::::',
           host: 'spark.embiq.com',
           pathname: '/api/config/tag_positions',
           nativeProtocols:
            { 'http:':
               { _connectionListener: [Function: connectionListener],
                 METHODS:
                  [ 'ACL',
                    'BIND',
                    'CHECKOUT',
                    'CONNECT',
                    'COPY',
                    'DELETE',
                    'GET',
                    'HEAD',
                    'LINK',
                    'LOCK',
                    'M-SEARCH',
                    'MERGE',
                    'MKACTIVITY',
                    'MKCALENDAR',
                    'MKCOL',
                    'MOVE',
                    'NOTIFY',
                    'OPTIONS',
                    'PATCH',
                    'POST',
                    'PROPFIND',
                    'PROPPATCH',
                    'PURGE',
                    'PUT',
                    'REBIND',
                    'REPORT',
                    'SEARCH',
                    'SOURCE',
                    'SUBSCRIBE',
                    'TRACE',
                    'UNBIND',
                    'UNLINK',
                    'UNLOCK',
                    'UNSUBSCRIBE' ],
                 STATUS_CODES:
                  { '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Unordered Collection',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required' },
                 Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                 ClientRequest: [Function: ClientRequest],
                 globalAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 80,
                    protocol: 'http:',
                    options: { path: null },
                    requests: {},
                    sockets: {},
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256 },
                 IncomingMessage: [Function: IncomingMessage],
                 OutgoingMessage: [Function: OutgoingMessage],
                 Server: [Function: Server],
                 ServerResponse: [Function: ServerResponse],
                 createServer: [Function: createServer],
                 get: [Function: get],
                 request: [Function: request] },
              'https:':
               { Agent: [Function: Agent],
                 globalAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: { path: null },
                    requests: {},
                    sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    maxCachedSessions: 100,
                    _sessionCache:
                     { map:
                        { 'spark.embiq.com:443::::::::::::::::':
                           <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                       list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                 Server: [Function: Server],
                 createServer: [Function: createServer],
                 get: [Function: get],
                 request: [Function: request] } },
           port: 443,
           hostname: 'spark.embiq.com',
           auth: undefined,
           agent: undefined,
           headers:
            { Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json;charset=utf-8',
              'User-Agent': 'axios/0.18.0',
              'Content-Length': 40 },
           method: 'post',
           path: null,
           protocol: 'https:',
           maxBodyLength: 10485760,
           maxRedirects: 21,
           _defaultAgent:
            Agent {
              _events: [Object: null prototype] { free: [Function] },
              _eventsCount: 1,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: { path: null },
              requests: {},
              sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
              freeSockets: {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              maxCachedSessions: 100,
              _sessionCache:
               { map:
                  { 'spark.embiq.com:443::::::::::::::::':
                     <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                 list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
           servername: 'spark.embiq.com',
           singleUse: true } },
     connection:
      TLSSocket {
        _tlsOptions:
         { pipe: false,
           secureContext: SecureContext { context: SecureContext {}, singleUse: true },
           isServer: false,
           requestCert: true,
           rejectUnauthorized: true,
           session: undefined,
           ALPNProtocols: undefined,
           requestOCSP: undefined },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'spark.embiq.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events:
         [Object: null prototype] {
           close:
            [ [Function: onSocketCloseDestroySSL],
              { [Function: bound onceWrapper] listener: [Function] },
              [Function: onClose],
              [Function: socketCloseListener] ],
           end: [Function: onReadableStreamEnd],
           secure: [Function: onConnectSecure],
           free: [Function: onFree],
           agentRemove: [Function: onRemove],
           drain: [Function: ondrain],
           error: [Function: socketErrorListener],
           finish:
            { [Function: bound onceWrapper] listener: [Function: destroy] } },
        _eventsCount: 8,
        connecting: false,
        _hadError: false,
        _handle:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              onread: null,
              onconnection: null,
              [Symbol(owner)]: [Circular] },
           _parentWrap: undefined,
           _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
           reading: true,
           onread: [Function: onStreamRead],
           onhandshakestart: [Function: noop],
           onhandshakedone: [Function: bound ],
           onocspresponse: [Function: onocspresponse],
           onerror: [Function: onerror],
           [Symbol(owner)]: [Circular] },
        _parent: null,
        _host: 'spark.embiq.com',
        _readableState:
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           emitClose: false,
           autoDestroy: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        _maxListeners: undefined,
        _writableState:
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: true,
           needDrain: false,
           ending: true,
           ended: true,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: false,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 1,
           prefinished: false,
           errorEmitted: false,
           emitClose: false,
           autoDestroy: false,
           bufferedRequestCount: 0,
           corkedRequestsFree:
            { next:
               { next: null,
                 entry: null,
                 finish: [Function: bound onCorkedFinish] },
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              onread: null,
              onconnection: null,
              [Symbol(owner)]: [Circular] },
           _parentWrap: undefined,
           _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
           reading: true,
           onread: [Function: onStreamRead],
           onhandshakestart: [Function: noop],
           onhandshakedone: [Function: bound ],
           onocspresponse: [Function: onocspresponse],
           onerror: [Function: onerror],
           [Symbol(owner)]: [Circular] },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular],
        [Symbol(res)]:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              onread: null,
              onconnection: null,
              [Symbol(owner)]: [Circular] },
           _parentWrap: undefined,
           _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
           reading: true,
           onread: [Function: onStreamRead],
           onhandshakestart: [Function: noop],
           onhandshakedone: [Function: bound ],
           onocspresponse: [Function: onocspresponse],
           onerror: [Function: onerror],
           [Symbol(owner)]: [Circular] },
        [Symbol(asyncId)]: 7,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]:
         { rejectUnauthorized: true,
           ciphers:
            'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
           checkServerIdentity: [Function: checkServerIdentity],
           minDHSize: 1024,
           encoding: null,
           _agentKey: 'spark.embiq.com:443::::::::::::::::',
           host: 'spark.embiq.com',
           pathname: '/api/config/tag_positions',
           nativeProtocols:
            { 'http:':
               { _connectionListener: [Function: connectionListener],
                 METHODS:
                  [ 'ACL',
                    'BIND',
                    'CHECKOUT',
                    'CONNECT',
                    'COPY',
                    'DELETE',
                    'GET',
                    'HEAD',
                    'LINK',
                    'LOCK',
                    'M-SEARCH',
                    'MERGE',
                    'MKACTIVITY',
                    'MKCALENDAR',
                    'MKCOL',
                    'MOVE',
                    'NOTIFY',
                    'OPTIONS',
                    'PATCH',
                    'POST',
                    'PROPFIND',
                    'PROPPATCH',
                    'PURGE',
                    'PUT',
                    'REBIND',
                    'REPORT',
                    'SEARCH',
                    'SOURCE',
                    'SUBSCRIBE',
                    'TRACE',
                    'UNBIND',
                    'UNLINK',
                    'UNLOCK',
                    'UNSUBSCRIBE' ],
                 STATUS_CODES:
                  { '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Unordered Collection',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required' },
                 Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                 ClientRequest: [Function: ClientRequest],
                 globalAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 80,
                    protocol: 'http:',
                    options: { path: null },
                    requests: {},
                    sockets: {},
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256 },
                 IncomingMessage: [Function: IncomingMessage],
                 OutgoingMessage: [Function: OutgoingMessage],
                 Server: [Function: Server],
                 ServerResponse: [Function: ServerResponse],
                 createServer: [Function: createServer],
                 get: [Function: get],
                 request: [Function: request] },
              'https:':
               { Agent: [Function: Agent],
                 globalAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: { path: null },
                    requests: {},
                    sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    maxCachedSessions: 100,
                    _sessionCache:
                     { map:
                        { 'spark.embiq.com:443::::::::::::::::':
                           <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                       list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                 Server: [Function: Server],
                 createServer: [Function: createServer],
                 get: [Function: get],
                 request: [Function: request] } },
           port: 443,
           hostname: 'spark.embiq.com',
           auth: undefined,
           agent: undefined,
           headers:
            { Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json;charset=utf-8',
              'User-Agent': 'axios/0.18.0',
              'Content-Length': 40 },
           method: 'post',
           path: null,
           protocol: 'https:',
           maxBodyLength: 10485760,
           maxRedirects: 21,
           _defaultAgent:
            Agent {
              _events: [Object: null prototype] { free: [Function] },
              _eventsCount: 1,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: { path: null },
              requests: {},
              sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
              freeSockets: {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              maxCachedSessions: 100,
              _sessionCache:
               { map:
                  { 'spark.embiq.com:443::::::::::::::::':
                     <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                 list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
           servername: 'spark.embiq.com',
           singleUse: true } },
     _header:
      'POST /api/config/tag_positions HTTP/1.1\r\nAccept: application/json, text/plain, */*\r\nContent-Type: application/json;charset=utf-8\r\nUser-Agent: axios/0.18.0\r\nContent-Length: 40\r\nHost: spark.embiq.com\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object: null prototype] { free: [Function] },
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: { path: null },
        requests: {},
        sockets:
         { 'spark.embiq.com:443::::::::::::::::':
            [ TLSSocket {
                _tlsOptions:
                 { pipe: false,
                   secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                   isServer: false,
                   requestCert: true,
                   rejectUnauthorized: true,
                   session: undefined,
                   ALPNProtocols: undefined,
                   requestOCSP: undefined },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                _SNICallback: null,
                servername: 'spark.embiq.com',
                alpnProtocol: false,
                authorized: true,
                authorizationError: null,
                encrypted: true,
                _events:
                 [Object: null prototype] {
                   close:
                    [ [Function: onSocketCloseDestroySSL],
                      { [Function: bound onceWrapper] listener: [Function] },
                      [Function: onClose],
                      [Function: socketCloseListener] ],
                   end: [Function: onReadableStreamEnd],
                   secure: [Function: onConnectSecure],
                   free: [Function: onFree],
                   agentRemove: [Function: onRemove],
                   drain: [Function: ondrain],
                   error: [Function: socketErrorListener],
                   finish:
                    { [Function: bound onceWrapper] listener: [Function: destroy] } },
                _eventsCount: 8,
                connecting: false,
                _hadError: false,
                _handle:
                 TLSWrap {
                   _parent:
                    TCP {
                      reading: [Getter/Setter],
                      onread: null,
                      onconnection: null,
                      [Symbol(owner)]: [Circular] },
                   _parentWrap: undefined,
                   _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                   reading: true,
                   onread: [Function: onStreamRead],
                   onhandshakestart: [Function: noop],
                   onhandshakedone: [Function: bound ],
                   onocspresponse: [Function: onocspresponse],
                   onerror: [Function: onerror],
                   [Symbol(owner)]: [Circular] },
                _parent: null,
                _host: 'spark.embiq.com',
                _readableState:
                 ReadableState {
                   objectMode: false,
                   highWaterMark: 16384,
                   buffer: BufferList { head: null, tail: null, length: 0 },
                   length: 0,
                   pipes: null,
                   pipesCount: 0,
                   flowing: true,
                   ended: false,
                   endEmitted: false,
                   reading: true,
                   sync: false,
                   needReadable: true,
                   emittedReadable: false,
                   readableListening: false,
                   resumeScheduled: false,
                   emitClose: false,
                   autoDestroy: false,
                   destroyed: false,
                   defaultEncoding: 'utf8',
                   awaitDrain: 0,
                   readingMore: false,
                   decoder: null,
                   encoding: null },
                readable: true,
                _maxListeners: undefined,
                _writableState:
                 WritableState {
                   objectMode: false,
                   highWaterMark: 16384,
                   finalCalled: true,
                   needDrain: false,
                   ending: true,
                   ended: true,
                   finished: false,
                   destroyed: false,
                   decodeStrings: false,
                   defaultEncoding: 'utf8',
                   length: 0,
                   writing: false,
                   corked: 0,
                   sync: false,
                   bufferProcessing: false,
                   onwrite: [Function: bound onwrite],
                   writecb: null,
                   writelen: 0,
                   bufferedRequest: null,
                   lastBufferedRequest: null,
                   pendingcb: 1,
                   prefinished: false,
                   errorEmitted: false,
                   emitClose: false,
                   autoDestroy: false,
                   bufferedRequestCount: 0,
                   corkedRequestsFree:
                    { next:
                       { next: null,
                         entry: null,
                         finish: [Function: bound onCorkedFinish] },
                      entry: null,
                      finish: [Function: bound onCorkedFinish] } },
                writable: false,
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl:
                 TLSWrap {
                   _parent:
                    TCP {
                      reading: [Getter/Setter],
                      onread: null,
                      onconnection: null,
                      [Symbol(owner)]: [Circular] },
                   _parentWrap: undefined,
                   _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                   reading: true,
                   onread: [Function: onStreamRead],
                   onhandshakestart: [Function: noop],
                   onhandshakedone: [Function: bound ],
                   onocspresponse: [Function: onocspresponse],
                   onerror: [Function: onerror],
                   [Symbol(owner)]: [Circular] },
                _requestCert: true,
                _rejectUnauthorized: true,
                parser: null,
                _httpMessage: [Circular],
                [Symbol(res)]:
                 TLSWrap {
                   _parent:
                    TCP {
                      reading: [Getter/Setter],
                      onread: null,
                      onconnection: null,
                      [Symbol(owner)]: [Circular] },
                   _parentWrap: undefined,
                   _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                   reading: true,
                   onread: [Function: onStreamRead],
                   onhandshakestart: [Function: noop],
                   onhandshakedone: [Function: bound ],
                   onocspresponse: [Function: onocspresponse],
                   onerror: [Function: onerror],
                   [Symbol(owner)]: [Circular] },
                [Symbol(asyncId)]: 7,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(connect-options)]:
                 { rejectUnauthorized: true,
                   ciphers:
                    'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                   checkServerIdentity: [Function: checkServerIdentity],
                   minDHSize: 1024,
                   encoding: null,
                   _agentKey: 'spark.embiq.com:443::::::::::::::::',
                   host: 'spark.embiq.com',
                   pathname: '/api/config/tag_positions',
                   nativeProtocols:
                    { 'http:':
                       { _connectionListener: [Function: connectionListener],
                         METHODS:
                          [ 'ACL',
                            'BIND',
                            'CHECKOUT',
                            'CONNECT',
                            'COPY',
                            'DELETE',
                            'GET',
                            'HEAD',
                            'LINK',
                            'LOCK',
                            'M-SEARCH',
                            'MERGE',
                            'MKACTIVITY',
                            'MKCALENDAR',
                            'MKCOL',
                            'MOVE',
                            'NOTIFY',
                            'OPTIONS',
                            'PATCH',
                            'POST',
                            'PROPFIND',
                            'PROPPATCH',
                            'PURGE',
                            'PUT',
                            'REBIND',
                            'REPORT',
                            'SEARCH',
                            'SOURCE',
                            'SUBSCRIBE',
                            'TRACE',
                            'UNBIND',
                            'UNLINK',
                            'UNLOCK',
                            'UNSUBSCRIBE' ],
                         STATUS_CODES:
                          { '100': 'Continue',
                            '101': 'Switching Protocols',
                            '102': 'Processing',
                            '103': 'Early Hints',
                            '200': 'OK',
                            '201': 'Created',
                            '202': 'Accepted',
                            '203': 'Non-Authoritative Information',
                            '204': 'No Content',
                            '205': 'Reset Content',
                            '206': 'Partial Content',
                            '207': 'Multi-Status',
                            '208': 'Already Reported',
                            '226': 'IM Used',
                            '300': 'Multiple Choices',
                            '301': 'Moved Permanently',
                            '302': 'Found',
                            '303': 'See Other',
                            '304': 'Not Modified',
                            '305': 'Use Proxy',
                            '307': 'Temporary Redirect',
                            '308': 'Permanent Redirect',
                            '400': 'Bad Request',
                            '401': 'Unauthorized',
                            '402': 'Payment Required',
                            '403': 'Forbidden',
                            '404': 'Not Found',
                            '405': 'Method Not Allowed',
                            '406': 'Not Acceptable',
                            '407': 'Proxy Authentication Required',
                            '408': 'Request Timeout',
                            '409': 'Conflict',
                            '410': 'Gone',
                            '411': 'Length Required',
                            '412': 'Precondition Failed',
                            '413': 'Payload Too Large',
                            '414': 'URI Too Long',
                            '415': 'Unsupported Media Type',
                            '416': 'Range Not Satisfiable',
                            '417': 'Expectation Failed',
                            '418': "I'm a Teapot",
                            '421': 'Misdirected Request',
                            '422': 'Unprocessable Entity',
                            '423': 'Locked',
                            '424': 'Failed Dependency',
                            '425': 'Unordered Collection',
                            '426': 'Upgrade Required',
                            '428': 'Precondition Required',
                            '429': 'Too Many Requests',
                            '431': 'Request Header Fields Too Large',
                            '451': 'Unavailable For Legal Reasons',
                            '500': 'Internal Server Error',
                            '501': 'Not Implemented',
                            '502': 'Bad Gateway',
                            '503': 'Service Unavailable',
                            '504': 'Gateway Timeout',
                            '505': 'HTTP Version Not Supported',
                            '506': 'Variant Also Negotiates',
                            '507': 'Insufficient Storage',
                            '508': 'Loop Detected',
                            '509': 'Bandwidth Limit Exceeded',
                            '510': 'Not Extended',
                            '511': 'Network Authentication Required' },
                         Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                         ClientRequest: [Function: ClientRequest],
                         globalAgent:
                          Agent {
                            _events: [Object: null prototype] { free: [Function] },
                            _eventsCount: 1,
                            _maxListeners: undefined,
                            defaultPort: 80,
                            protocol: 'http:',
                            options: { path: null },
                            requests: {},
                            sockets: {},
                            freeSockets: {},
                            keepAliveMsecs: 1000,
                            keepAlive: false,
                            maxSockets: Infinity,
                            maxFreeSockets: 256 },
                         IncomingMessage: [Function: IncomingMessage],
                         OutgoingMessage: [Function: OutgoingMessage],
                         Server: [Function: Server],
                         ServerResponse: [Function: ServerResponse],
                         createServer: [Function: createServer],
                         get: [Function: get],
                         request: [Function: request] },
                      'https:':
                       { Agent: [Function: Agent],
                         globalAgent: [Circular],
                         Server: [Function: Server],
                         createServer: [Function: createServer],
                         get: [Function: get],
                         request: [Function: request] } },
                   port: 443,
                   hostname: 'spark.embiq.com',
                   auth: undefined,
                   agent: undefined,
                   headers:
                    { Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json;charset=utf-8',
                      'User-Agent': 'axios/0.18.0',
                      'Content-Length': 40 },
                   method: 'post',
                   path: null,
                   protocol: 'https:',
                   maxBodyLength: 10485760,
                   maxRedirects: 21,
                   _defaultAgent: [Circular],
                   servername: 'spark.embiq.com',
                   singleUse: true } } ] },
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        maxCachedSessions: 100,
        _sessionCache:
         { map:
            { 'spark.embiq.com:443::::::::::::::::':
               <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
           list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/api/config/tag_positions',
     _ended: true,
     res:
      IncomingMessage {
        _readableState:
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: true,
           endEmitted: true,
           reading: false,
           sync: true,
           needReadable: false,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           emitClose: true,
           autoDestroy: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: true,
           decoder: null,
           encoding: null },
        readable: false,
        _events:
         [Object: null prototype] {
           end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
           data: [Function: handleStreamData],
           error: [Function: handleStreamError] },
        _eventsCount: 3,
        _maxListeners: undefined,
        socket:
         TLSSocket {
           _tlsOptions:
            { pipe: false,
              secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined },
           _secureEstablished: true,
           _securePending: false,
           _newSessionPending: false,
           _controlReleased: true,
           _SNICallback: null,
           servername: 'spark.embiq.com',
           alpnProtocol: false,
           authorized: true,
           authorizationError: null,
           encrypted: true,
           _events:
            [Object: null prototype] {
              close:
               [ [Function: onSocketCloseDestroySSL],
                 { [Function: bound onceWrapper] listener: [Function] },
                 [Function: onClose],
                 [Function: socketCloseListener] ],
              end: [Function: onReadableStreamEnd],
              secure: [Function: onConnectSecure],
              free: [Function: onFree],
              agentRemove: [Function: onRemove],
              drain: [Function: ondrain],
              error: [Function: socketErrorListener],
              finish:
               { [Function: bound onceWrapper] listener: [Function: destroy] } },
           _eventsCount: 8,
           connecting: false,
           _hadError: false,
           _handle:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _parent: null,
           _host: 'spark.embiq.com',
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree:
               { next:
                  { next: null,
                    entry: null,
                    finish: [Function: bound onCorkedFinish] },
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: false,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: undefined,
           _server: null,
           ssl:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _requestCert: true,
           _rejectUnauthorized: true,
           parser: null,
           _httpMessage: [Circular],
           [Symbol(res)]:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           [Symbol(asyncId)]: 7,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0,
           [Symbol(connect-options)]:
            { rejectUnauthorized: true,
              ciphers:
               'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              encoding: null,
              _agentKey: 'spark.embiq.com:443::::::::::::::::',
              host: 'spark.embiq.com',
              pathname: '/api/config/tag_positions',
              nativeProtocols:
               { 'http:':
                  { _connectionListener: [Function: connectionListener],
                    METHODS:
                     [ 'ACL',
                       'BIND',
                       'CHECKOUT',
                       'CONNECT',
                       'COPY',
                       'DELETE',
                       'GET',
                       'HEAD',
                       'LINK',
                       'LOCK',
                       'M-SEARCH',
                       'MERGE',
                       'MKACTIVITY',
                       'MKCALENDAR',
                       'MKCOL',
                       'MOVE',
                       'NOTIFY',
                       'OPTIONS',
                       'PATCH',
                       'POST',
                       'PROPFIND',
                       'PROPPATCH',
                       'PURGE',
                       'PUT',
                       'REBIND',
                       'REPORT',
                       'SEARCH',
                       'SOURCE',
                       'SUBSCRIBE',
                       'TRACE',
                       'UNBIND',
                       'UNLINK',
                       'UNLOCK',
                       'UNSUBSCRIBE' ],
                    STATUS_CODES:
                     { '100': 'Continue',
                       '101': 'Switching Protocols',
                       '102': 'Processing',
                       '103': 'Early Hints',
                       '200': 'OK',
                       '201': 'Created',
                       '202': 'Accepted',
                       '203': 'Non-Authoritative Information',
                       '204': 'No Content',
                       '205': 'Reset Content',
                       '206': 'Partial Content',
                       '207': 'Multi-Status',
                       '208': 'Already Reported',
                       '226': 'IM Used',
                       '300': 'Multiple Choices',
                       '301': 'Moved Permanently',
                       '302': 'Found',
                       '303': 'See Other',
                       '304': 'Not Modified',
                       '305': 'Use Proxy',
                       '307': 'Temporary Redirect',
                       '308': 'Permanent Redirect',
                       '400': 'Bad Request',
                       '401': 'Unauthorized',
                       '402': 'Payment Required',
                       '403': 'Forbidden',
                       '404': 'Not Found',
                       '405': 'Method Not Allowed',
                       '406': 'Not Acceptable',
                       '407': 'Proxy Authentication Required',
                       '408': 'Request Timeout',
                       '409': 'Conflict',
                       '410': 'Gone',
                       '411': 'Length Required',
                       '412': 'Precondition Failed',
                       '413': 'Payload Too Large',
                       '414': 'URI Too Long',
                       '415': 'Unsupported Media Type',
                       '416': 'Range Not Satisfiable',
                       '417': 'Expectation Failed',
                       '418': "I'm a Teapot",
                       '421': 'Misdirected Request',
                       '422': 'Unprocessable Entity',
                       '423': 'Locked',
                       '424': 'Failed Dependency',
                       '425': 'Unordered Collection',
                       '426': 'Upgrade Required',
                       '428': 'Precondition Required',
                       '429': 'Too Many Requests',
                       '431': 'Request Header Fields Too Large',
                       '451': 'Unavailable For Legal Reasons',
                       '500': 'Internal Server Error',
                       '501': 'Not Implemented',
                       '502': 'Bad Gateway',
                       '503': 'Service Unavailable',
                       '504': 'Gateway Timeout',
                       '505': 'HTTP Version Not Supported',
                       '506': 'Variant Also Negotiates',
                       '507': 'Insufficient Storage',
                       '508': 'Loop Detected',
                       '509': 'Bandwidth Limit Exceeded',
                       '510': 'Not Extended',
                       '511': 'Network Authentication Required' },
                    Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] },
                 'https:':
                  { Agent: [Function: Agent],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 443,
                       protocol: 'https:',
                       options: { path: null },
                       requests: {},
                       sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256,
                       maxCachedSessions: 100,
                       _sessionCache:
                        { map:
                           { 'spark.embiq.com:443::::::::::::::::':
                              <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                          list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] } },
              port: 443,
              hostname: 'spark.embiq.com',
              auth: undefined,
              agent: undefined,
              headers:
               { Accept: 'application/json, text/plain, */*',
                 'Content-Type': 'application/json;charset=utf-8',
                 'User-Agent': 'axios/0.18.0',
                 'Content-Length': 40 },
              method: 'post',
              path: null,
              protocol: 'https:',
              maxBodyLength: 10485760,
              maxRedirects: 21,
              _defaultAgent:
               Agent {
                 _events: [Object: null prototype] { free: [Function] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 defaultPort: 443,
                 protocol: 'https:',
                 options: { path: null },
                 requests: {},
                 sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                 freeSockets: {},
                 keepAliveMsecs: 1000,
                 keepAlive: false,
                 maxSockets: Infinity,
                 maxFreeSockets: 256,
                 maxCachedSessions: 100,
                 _sessionCache:
                  { map:
                     { 'spark.embiq.com:443::::::::::::::::':
                        <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                    list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
              servername: 'spark.embiq.com',
              singleUse: true } },
        connection:
         TLSSocket {
           _tlsOptions:
            { pipe: false,
              secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined },
           _secureEstablished: true,
           _securePending: false,
           _newSessionPending: false,
           _controlReleased: true,
           _SNICallback: null,
           servername: 'spark.embiq.com',
           alpnProtocol: false,
           authorized: true,
           authorizationError: null,
           encrypted: true,
           _events:
            [Object: null prototype] {
              close:
               [ [Function: onSocketCloseDestroySSL],
                 { [Function: bound onceWrapper] listener: [Function] },
                 [Function: onClose],
                 [Function: socketCloseListener] ],
              end: [Function: onReadableStreamEnd],
              secure: [Function: onConnectSecure],
              free: [Function: onFree],
              agentRemove: [Function: onRemove],
              drain: [Function: ondrain],
              error: [Function: socketErrorListener],
              finish:
               { [Function: bound onceWrapper] listener: [Function: destroy] } },
           _eventsCount: 8,
           connecting: false,
           _hadError: false,
           _handle:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _parent: null,
           _host: 'spark.embiq.com',
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree:
               { next:
                  { next: null,
                    entry: null,
                    finish: [Function: bound onCorkedFinish] },
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: false,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: undefined,
           _server: null,
           ssl:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _requestCert: true,
           _rejectUnauthorized: true,
           parser: null,
           _httpMessage: [Circular],
           [Symbol(res)]:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           [Symbol(asyncId)]: 7,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0,
           [Symbol(connect-options)]:
            { rejectUnauthorized: true,
              ciphers:
               'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              encoding: null,
              _agentKey: 'spark.embiq.com:443::::::::::::::::',
              host: 'spark.embiq.com',
              pathname: '/api/config/tag_positions',
              nativeProtocols:
               { 'http:':
                  { _connectionListener: [Function: connectionListener],
                    METHODS:
                     [ 'ACL',
                       'BIND',
                       'CHECKOUT',
                       'CONNECT',
                       'COPY',
                       'DELETE',
                       'GET',
                       'HEAD',
                       'LINK',
                       'LOCK',
                       'M-SEARCH',
                       'MERGE',
                       'MKACTIVITY',
                       'MKCALENDAR',
                       'MKCOL',
                       'MOVE',
                       'NOTIFY',
                       'OPTIONS',
                       'PATCH',
                       'POST',
                       'PROPFIND',
                       'PROPPATCH',
                       'PURGE',
                       'PUT',
                       'REBIND',
                       'REPORT',
                       'SEARCH',
                       'SOURCE',
                       'SUBSCRIBE',
                       'TRACE',
                       'UNBIND',
                       'UNLINK',
                       'UNLOCK',
                       'UNSUBSCRIBE' ],
                    STATUS_CODES:
                     { '100': 'Continue',
                       '101': 'Switching Protocols',
                       '102': 'Processing',
                       '103': 'Early Hints',
                       '200': 'OK',
                       '201': 'Created',
                       '202': 'Accepted',
                       '203': 'Non-Authoritative Information',
                       '204': 'No Content',
                       '205': 'Reset Content',
                       '206': 'Partial Content',
                       '207': 'Multi-Status',
                       '208': 'Already Reported',
                       '226': 'IM Used',
                       '300': 'Multiple Choices',
                       '301': 'Moved Permanently',
                       '302': 'Found',
                       '303': 'See Other',
                       '304': 'Not Modified',
                       '305': 'Use Proxy',
                       '307': 'Temporary Redirect',
                       '308': 'Permanent Redirect',
                       '400': 'Bad Request',
                       '401': 'Unauthorized',
                       '402': 'Payment Required',
                       '403': 'Forbidden',
                       '404': 'Not Found',
                       '405': 'Method Not Allowed',
                       '406': 'Not Acceptable',
                       '407': 'Proxy Authentication Required',
                       '408': 'Request Timeout',
                       '409': 'Conflict',
                       '410': 'Gone',
                       '411': 'Length Required',
                       '412': 'Precondition Failed',
                       '413': 'Payload Too Large',
                       '414': 'URI Too Long',
                       '415': 'Unsupported Media Type',
                       '416': 'Range Not Satisfiable',
                       '417': 'Expectation Failed',
                       '418': "I'm a Teapot",
                       '421': 'Misdirected Request',
                       '422': 'Unprocessable Entity',
                       '423': 'Locked',
                       '424': 'Failed Dependency',
                       '425': 'Unordered Collection',
                       '426': 'Upgrade Required',
                       '428': 'Precondition Required',
                       '429': 'Too Many Requests',
                       '431': 'Request Header Fields Too Large',
                       '451': 'Unavailable For Legal Reasons',
                       '500': 'Internal Server Error',
                       '501': 'Not Implemented',
                       '502': 'Bad Gateway',
                       '503': 'Service Unavailable',
                       '504': 'Gateway Timeout',
                       '505': 'HTTP Version Not Supported',
                       '506': 'Variant Also Negotiates',
                       '507': 'Insufficient Storage',
                       '508': 'Loop Detected',
                       '509': 'Bandwidth Limit Exceeded',
                       '510': 'Not Extended',
                       '511': 'Network Authentication Required' },
                    Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] },
                 'https:':
                  { Agent: [Function: Agent],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 443,
                       protocol: 'https:',
                       options: { path: null },
                       requests: {},
                       sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256,
                       maxCachedSessions: 100,
                       _sessionCache:
                        { map:
                           { 'spark.embiq.com:443::::::::::::::::':
                              <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                          list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] } },
              port: 443,
              hostname: 'spark.embiq.com',
              auth: undefined,
              agent: undefined,
              headers:
               { Accept: 'application/json, text/plain, */*',
                 'Content-Type': 'application/json;charset=utf-8',
                 'User-Agent': 'axios/0.18.0',
                 'Content-Length': 40 },
              method: 'post',
              path: null,
              protocol: 'https:',
              maxBodyLength: 10485760,
              maxRedirects: 21,
              _defaultAgent:
               Agent {
                 _events: [Object: null prototype] { free: [Function] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 defaultPort: 443,
                 protocol: 'https:',
                 options: { path: null },
                 requests: {},
                 sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                 freeSockets: {},
                 keepAliveMsecs: 1000,
                 keepAlive: false,
                 maxSockets: Infinity,
                 maxFreeSockets: 256,
                 maxCachedSessions: 100,
                 _sessionCache:
                  { map:
                     { 'spark.embiq.com:443::::::::::::::::':
                        <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                    list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
              servername: 'spark.embiq.com',
              singleUse: true } },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers:
         { server: 'nginx',
           date: 'Tue, 19 Feb 2019 09:53:01 GMT',
           'content-type': 'text/html',
           'content-length': '27',
           connection: 'close',
           'x-frame-options': 'SAMEORIGIN',
           vary: 'Origin' },
        rawHeaders:
         [ 'Server',
           'nginx',
           'Date',
           'Tue, 19 Feb 2019 09:53:01 GMT',
           'Content-Type',
           'text/html',
           'Content-Length',
           '27',
           'Connection',
           'close',
           'X-Frame-Options',
           'SAMEORIGIN',
           'Vary',
           'Origin' ],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 500,
        statusMessage: 'Internal Server Error',
        client:
         TLSSocket {
           _tlsOptions:
            { pipe: false,
              secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined },
           _secureEstablished: true,
           _securePending: false,
           _newSessionPending: false,
           _controlReleased: true,
           _SNICallback: null,
           servername: 'spark.embiq.com',
           alpnProtocol: false,
           authorized: true,
           authorizationError: null,
           encrypted: true,
           _events:
            [Object: null prototype] {
              close:
               [ [Function: onSocketCloseDestroySSL],
                 { [Function: bound onceWrapper] listener: [Function] },
                 [Function: onClose],
                 [Function: socketCloseListener] ],
              end: [Function: onReadableStreamEnd],
              secure: [Function: onConnectSecure],
              free: [Function: onFree],
              agentRemove: [Function: onRemove],
              drain: [Function: ondrain],
              error: [Function: socketErrorListener],
              finish:
               { [Function: bound onceWrapper] listener: [Function: destroy] } },
           _eventsCount: 8,
           connecting: false,
           _hadError: false,
           _handle:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _parent: null,
           _host: 'spark.embiq.com',
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree:
               { next:
                  { next: null,
                    entry: null,
                    finish: [Function: bound onCorkedFinish] },
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: false,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: undefined,
           _server: null,
           ssl:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _requestCert: true,
           _rejectUnauthorized: true,
           parser: null,
           _httpMessage: [Circular],
           [Symbol(res)]:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           [Symbol(asyncId)]: 7,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0,
           [Symbol(connect-options)]:
            { rejectUnauthorized: true,
              ciphers:
               'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              encoding: null,
              _agentKey: 'spark.embiq.com:443::::::::::::::::',
              host: 'spark.embiq.com',
              pathname: '/api/config/tag_positions',
              nativeProtocols:
               { 'http:':
                  { _connectionListener: [Function: connectionListener],
                    METHODS:
                     [ 'ACL',
                       'BIND',
                       'CHECKOUT',
                       'CONNECT',
                       'COPY',
                       'DELETE',
                       'GET',
                       'HEAD',
                       'LINK',
                       'LOCK',
                       'M-SEARCH',
                       'MERGE',
                       'MKACTIVITY',
                       'MKCALENDAR',
                       'MKCOL',
                       'MOVE',
                       'NOTIFY',
                       'OPTIONS',
                       'PATCH',
                       'POST',
                       'PROPFIND',
                       'PROPPATCH',
                       'PURGE',
                       'PUT',
                       'REBIND',
                       'REPORT',
                       'SEARCH',
                       'SOURCE',
                       'SUBSCRIBE',
                       'TRACE',
                       'UNBIND',
                       'UNLINK',
                       'UNLOCK',
                       'UNSUBSCRIBE' ],
                    STATUS_CODES:
                     { '100': 'Continue',
                       '101': 'Switching Protocols',
                       '102': 'Processing',
                       '103': 'Early Hints',
                       '200': 'OK',
                       '201': 'Created',
                       '202': 'Accepted',
                       '203': 'Non-Authoritative Information',
                       '204': 'No Content',
                       '205': 'Reset Content',
                       '206': 'Partial Content',
                       '207': 'Multi-Status',
                       '208': 'Already Reported',
                       '226': 'IM Used',
                       '300': 'Multiple Choices',
                       '301': 'Moved Permanently',
                       '302': 'Found',
                       '303': 'See Other',
                       '304': 'Not Modified',
                       '305': 'Use Proxy',
                       '307': 'Temporary Redirect',
                       '308': 'Permanent Redirect',
                       '400': 'Bad Request',
                       '401': 'Unauthorized',
                       '402': 'Payment Required',
                       '403': 'Forbidden',
                       '404': 'Not Found',
                       '405': 'Method Not Allowed',
                       '406': 'Not Acceptable',
                       '407': 'Proxy Authentication Required',
                       '408': 'Request Timeout',
                       '409': 'Conflict',
                       '410': 'Gone',
                       '411': 'Length Required',
                       '412': 'Precondition Failed',
                       '413': 'Payload Too Large',
                       '414': 'URI Too Long',
                       '415': 'Unsupported Media Type',
                       '416': 'Range Not Satisfiable',
                       '417': 'Expectation Failed',
                       '418': "I'm a Teapot",
                       '421': 'Misdirected Request',
                       '422': 'Unprocessable Entity',
                       '423': 'Locked',
                       '424': 'Failed Dependency',
                       '425': 'Unordered Collection',
                       '426': 'Upgrade Required',
                       '428': 'Precondition Required',
                       '429': 'Too Many Requests',
                       '431': 'Request Header Fields Too Large',
                       '451': 'Unavailable For Legal Reasons',
                       '500': 'Internal Server Error',
                       '501': 'Not Implemented',
                       '502': 'Bad Gateway',
                       '503': 'Service Unavailable',
                       '504': 'Gateway Timeout',
                       '505': 'HTTP Version Not Supported',
                       '506': 'Variant Also Negotiates',
                       '507': 'Insufficient Storage',
                       '508': 'Loop Detected',
                       '509': 'Bandwidth Limit Exceeded',
                       '510': 'Not Extended',
                       '511': 'Network Authentication Required' },
                    Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] },
                 'https:':
                  { Agent: [Function: Agent],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 443,
                       protocol: 'https:',
                       options: { path: null },
                       requests: {},
                       sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256,
                       maxCachedSessions: 100,
                       _sessionCache:
                        { map:
                           { 'spark.embiq.com:443::::::::::::::::':
                              <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                          list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] } },
              port: 443,
              hostname: 'spark.embiq.com',
              auth: undefined,
              agent: undefined,
              headers:
               { Accept: 'application/json, text/plain, */*',
                 'Content-Type': 'application/json;charset=utf-8',
                 'User-Agent': 'axios/0.18.0',
                 'Content-Length': 40 },
              method: 'post',
              path: null,
              protocol: 'https:',
              maxBodyLength: 10485760,
              maxRedirects: 21,
              _defaultAgent:
               Agent {
                 _events: [Object: null prototype] { free: [Function] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 defaultPort: 443,
                 protocol: 'https:',
                 options: { path: null },
                 requests: {},
                 sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                 freeSockets: {},
                 keepAliveMsecs: 1000,
                 keepAlive: false,
                 maxSockets: Infinity,
                 maxFreeSockets: 256,
                 maxCachedSessions: 100,
                 _sessionCache:
                  { map:
                     { 'spark.embiq.com:443::::::::::::::::':
                        <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                    list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
              servername: 'spark.embiq.com',
              singleUse: true } },
        _consuming: false,
        _dumped: false,
        req: [Circular],
        responseUrl: 'https://spark.embiq.com/api/config/tag_positions',
        redirects: [] },
     aborted: false,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     _redirectable:
      Writable {
        _writableState:
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: true,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           emitClose: true,
           autoDestroy: false,
           bufferedRequestCount: 0,
           corkedRequestsFree:
            { next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: true,
        _events:
         [Object: null prototype] {
           response: [Function: handleResponse],
           error: [Function: handleRequestError] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _options:
         { maxRedirects: 21,
           maxBodyLength: 10485760,
           protocol: 'https:',
           path: '/api/config/tag_positions',
           method: 'post',
           headers:
            { Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json;charset=utf-8',
              'User-Agent': 'axios/0.18.0',
              'Content-Length': 40 },
           agent: undefined,
           auth: undefined,
           hostname: 'spark.embiq.com',
           port: null,
           nativeProtocols:
            { 'http:':
               { _connectionListener: [Function: connectionListener],
                 METHODS:
                  [ 'ACL',
                    'BIND',
                    'CHECKOUT',
                    'CONNECT',
                    'COPY',
                    'DELETE',
                    'GET',
                    'HEAD',
                    'LINK',
                    'LOCK',
                    'M-SEARCH',
                    'MERGE',
                    'MKACTIVITY',
                    'MKCALENDAR',
                    'MKCOL',
                    'MOVE',
                    'NOTIFY',
                    'OPTIONS',
                    'PATCH',
                    'POST',
                    'PROPFIND',
                    'PROPPATCH',
                    'PURGE',
                    'PUT',
                    'REBIND',
                    'REPORT',
                    'SEARCH',
                    'SOURCE',
                    'SUBSCRIBE',
                    'TRACE',
                    'UNBIND',
                    'UNLINK',
                    'UNLOCK',
                    'UNSUBSCRIBE' ],
                 STATUS_CODES:
                  { '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Unordered Collection',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required' },
                 Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                 ClientRequest: [Function: ClientRequest],
                 globalAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 80,
                    protocol: 'http:',
                    options: { path: null },
                    requests: {},
                    sockets: {},
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256 },
                 IncomingMessage: [Function: IncomingMessage],
                 OutgoingMessage: [Function: OutgoingMessage],
                 Server: [Function: Server],
                 ServerResponse: [Function: ServerResponse],
                 createServer: [Function: createServer],
                 get: [Function: get],
                 request: [Function: request] },
              'https:':
               { Agent: [Function: Agent],
                 globalAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: { path: null },
                    requests: {},
                    sockets:
                     { 'spark.embiq.com:443::::::::::::::::':
                        [ TLSSocket {
                            _tlsOptions:
                             { pipe: false,
                               secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                               isServer: false,
                               requestCert: true,
                               rejectUnauthorized: true,
                               session: undefined,
                               ALPNProtocols: undefined,
                               requestOCSP: undefined },
                            _secureEstablished: true,
                            _securePending: false,
                            _newSessionPending: false,
                            _controlReleased: true,
                            _SNICallback: null,
                            servername: 'spark.embiq.com',
                            alpnProtocol: false,
                            authorized: true,
                            authorizationError: null,
                            encrypted: true,
                            _events:
                             [Object: null prototype] {
                               close:
                                [ [Function: onSocketCloseDestroySSL],
                                  { [Function: bound onceWrapper] listener: [Function] },
                                  [Function: onClose],
                                  [Function: socketCloseListener] ],
                               end: [Function: onReadableStreamEnd],
                               secure: [Function: onConnectSecure],
                               free: [Function: onFree],
                               agentRemove: [Function: onRemove],
                               drain: [Function: ondrain],
                               error: [Function: socketErrorListener],
                               finish:
                                { [Function: bound onceWrapper] listener: [Function: destroy] } },
                            _eventsCount: 8,
                            connecting: false,
                            _hadError: false,
                            _handle:
                             TLSWrap {
                               _parent:
                                TCP {
                                  reading: [Getter/Setter],
                                  onread: null,
                                  onconnection: null,
                                  [Symbol(owner)]: [Circular] },
                               _parentWrap: undefined,
                               _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                               reading: true,
                               onread: [Function: onStreamRead],
                               onhandshakestart: [Function: noop],
                               onhandshakedone: [Function: bound ],
                               onocspresponse: [Function: onocspresponse],
                               onerror: [Function: onerror],
                               [Symbol(owner)]: [Circular] },
                            _parent: null,
                            _host: 'spark.embiq.com',
                            _readableState:
                             ReadableState {
                               objectMode: false,
                               highWaterMark: 16384,
                               buffer: BufferList { head: null, tail: null, length: 0 },
                               length: 0,
                               pipes: null,
                               pipesCount: 0,
                               flowing: true,
                               ended: false,
                               endEmitted: false,
                               reading: true,
                               sync: false,
                               needReadable: true,
                               emittedReadable: false,
                               readableListening: false,
                               resumeScheduled: false,
                               emitClose: false,
                               autoDestroy: false,
                               destroyed: false,
                               defaultEncoding: 'utf8',
                               awaitDrain: 0,
                               readingMore: false,
                               decoder: null,
                               encoding: null },
                            readable: true,
                            _maxListeners: undefined,
                            _writableState:
                             WritableState {
                               objectMode: false,
                               highWaterMark: 16384,
                               finalCalled: true,
                               needDrain: false,
                               ending: true,
                               ended: true,
                               finished: false,
                               destroyed: false,
                               decodeStrings: false,
                               defaultEncoding: 'utf8',
                               length: 0,
                               writing: false,
                               corked: 0,
                               sync: false,
                               bufferProcessing: false,
                               onwrite: [Function: bound onwrite],
                               writecb: null,
                               writelen: 0,
                               bufferedRequest: null,
                               lastBufferedRequest: null,
                               pendingcb: 1,
                               prefinished: false,
                               errorEmitted: false,
                               emitClose: false,
                               autoDestroy: false,
                               bufferedRequestCount: 0,
                               corkedRequestsFree:
                                { next:
                                   { next: null,
                                     entry: null,
                                     finish: [Function: bound onCorkedFinish] },
                                  entry: null,
                                  finish: [Function: bound onCorkedFinish] } },
                            writable: false,
                            allowHalfOpen: false,
                            _sockname: null,
                            _pendingData: null,
                            _pendingEncoding: '',
                            server: undefined,
                            _server: null,
                            ssl:
                             TLSWrap {
                               _parent:
                                TCP {
                                  reading: [Getter/Setter],
                                  onread: null,
                                  onconnection: null,
                                  [Symbol(owner)]: [Circular] },
                               _parentWrap: undefined,
                               _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                               reading: true,
                               onread: [Function: onStreamRead],
                               onhandshakestart: [Function: noop],
                               onhandshakedone: [Function: bound ],
                               onocspresponse: [Function: onocspresponse],
                               onerror: [Function: onerror],
                               [Symbol(owner)]: [Circular] },
                            _requestCert: true,
                            _rejectUnauthorized: true,
                            parser: null,
                            _httpMessage: [Circular],
                            [Symbol(res)]:
                             TLSWrap {
                               _parent:
                                TCP {
                                  reading: [Getter/Setter],
                                  onread: null,
                                  onconnection: null,
                                  [Symbol(owner)]: [Circular] },
                               _parentWrap: undefined,
                               _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                               reading: true,
                               onread: [Function: onStreamRead],
                               onhandshakestart: [Function: noop],
                               onhandshakedone: [Function: bound ],
                               onocspresponse: [Function: onocspresponse],
                               onerror: [Function: onerror],
                               [Symbol(owner)]: [Circular] },
                            [Symbol(asyncId)]: 7,
                            [Symbol(lastWriteQueueSize)]: 0,
                            [Symbol(timeout)]: null,
                            [Symbol(kBytesRead)]: 0,
                            [Symbol(kBytesWritten)]: 0,
                            [Symbol(connect-options)]:
                             { rejectUnauthorized: true,
                               ciphers:
                                'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                               checkServerIdentity: [Function: checkServerIdentity],
                               minDHSize: 1024,
                               encoding: null,
                               _agentKey: 'spark.embiq.com:443::::::::::::::::',
                               host: 'spark.embiq.com',
                               pathname: '/api/config/tag_positions',
                               nativeProtocols: [Circular],
                               port: 443,
                               hostname: 'spark.embiq.com',
                               auth: undefined,
                               agent: undefined,
                               headers:
                                { Accept: 'application/json, text/plain, */*',
                                  'Content-Type': 'application/json;charset=utf-8',
                                  'User-Agent': 'axios/0.18.0',
                                  'Content-Length': 40 },
                               method: 'post',
                               path: null,
                               protocol: 'https:',
                               maxBodyLength: 10485760,
                               maxRedirects: 21,
                               _defaultAgent: [Circular],
                               servername: 'spark.embiq.com',
                               singleUse: true } } ] },
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    maxCachedSessions: 100,
                    _sessionCache:
                     { map:
                        { 'spark.embiq.com:443::::::::::::::::':
                           <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                       list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                 Server: [Function: Server],
                 createServer: [Function: createServer],
                 get: [Function: get],
                 request: [Function: request] } },
           pathname: '/api/config/tag_positions' },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 40,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function],
        _currentRequest: [Circular],
        _currentUrl: 'https://spark.embiq.com/api/config/tag_positions' },
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json;charset=utf-8' ],
        'user-agent': [ 'User-Agent', 'axios/0.18.0' ],
        'content-length': [ 'Content-Length', 40 ],
        host: [ 'Host', 'spark.embiq.com' ] } },
  response:
   { status: 500,
     statusText: 'Internal Server Error',
     headers:
      { server: 'nginx',
        date: 'Tue, 19 Feb 2019 09:53:01 GMT',
        'content-type': 'text/html',
        'content-length': '27',
        connection: 'close',
        'x-frame-options': 'SAMEORIGIN',
        vary: 'Origin' },
     config:
      { adapter: [Function: httpAdapter],
        transformRequest: { '0': [Function: transformRequest] },
        transformResponse: { '0': [Function: transformResponse] },
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        validateStatus: [Function: validateStatus],
        headers:
         { Accept: 'application/json, text/plain, */*',
           'Content-Type': 'application/json;charset=utf-8',
           'User-Agent': 'axios/0.18.0',
           'Content-Length': 40 },
        method: 'post',
        url: 'https://spark.embiq.com/api/config/tag_positions',
        data: '{"devaddr":"TAG1","data":"00C201C50000"}' },
     request:
      ClientRequest {
        _events:
         [Object: null prototype] {
           socket: [Function],
           abort: [Function],
           aborted: [Function],
           error: [Function],
           timeout: [Function],
           prefinish: [Function: requestOnPrefinish] },
        _eventsCount: 6,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket:
         TLSSocket {
           _tlsOptions:
            { pipe: false,
              secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined },
           _secureEstablished: true,
           _securePending: false,
           _newSessionPending: false,
           _controlReleased: true,
           _SNICallback: null,
           servername: 'spark.embiq.com',
           alpnProtocol: false,
           authorized: true,
           authorizationError: null,
           encrypted: true,
           _events:
            [Object: null prototype] {
              close:
               [ [Function: onSocketCloseDestroySSL],
                 { [Function: bound onceWrapper] listener: [Function] },
                 [Function: onClose],
                 [Function: socketCloseListener] ],
              end: [Function: onReadableStreamEnd],
              secure: [Function: onConnectSecure],
              free: [Function: onFree],
              agentRemove: [Function: onRemove],
              drain: [Function: ondrain],
              error: [Function: socketErrorListener],
              finish:
               { [Function: bound onceWrapper] listener: [Function: destroy] } },
           _eventsCount: 8,
           connecting: false,
           _hadError: false,
           _handle:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _parent: null,
           _host: 'spark.embiq.com',
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree:
               { next:
                  { next: null,
                    entry: null,
                    finish: [Function: bound onCorkedFinish] },
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: false,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: undefined,
           _server: null,
           ssl:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _requestCert: true,
           _rejectUnauthorized: true,
           parser: null,
           _httpMessage: [Circular],
           [Symbol(res)]:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           [Symbol(asyncId)]: 7,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0,
           [Symbol(connect-options)]:
            { rejectUnauthorized: true,
              ciphers:
               'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              encoding: null,
              _agentKey: 'spark.embiq.com:443::::::::::::::::',
              host: 'spark.embiq.com',
              pathname: '/api/config/tag_positions',
              nativeProtocols:
               { 'http:':
                  { _connectionListener: [Function: connectionListener],
                    METHODS:
                     [ 'ACL',
                       'BIND',
                       'CHECKOUT',
                       'CONNECT',
                       'COPY',
                       'DELETE',
                       'GET',
                       'HEAD',
                       'LINK',
                       'LOCK',
                       'M-SEARCH',
                       'MERGE',
                       'MKACTIVITY',
                       'MKCALENDAR',
                       'MKCOL',
                       'MOVE',
                       'NOTIFY',
                       'OPTIONS',
                       'PATCH',
                       'POST',
                       'PROPFIND',
                       'PROPPATCH',
                       'PURGE',
                       'PUT',
                       'REBIND',
                       'REPORT',
                       'SEARCH',
                       'SOURCE',
                       'SUBSCRIBE',
                       'TRACE',
                       'UNBIND',
                       'UNLINK',
                       'UNLOCK',
                       'UNSUBSCRIBE' ],
                    STATUS_CODES:
                     { '100': 'Continue',
                       '101': 'Switching Protocols',
                       '102': 'Processing',
                       '103': 'Early Hints',
                       '200': 'OK',
                       '201': 'Created',
                       '202': 'Accepted',
                       '203': 'Non-Authoritative Information',
                       '204': 'No Content',
                       '205': 'Reset Content',
                       '206': 'Partial Content',
                       '207': 'Multi-Status',
                       '208': 'Already Reported',
                       '226': 'IM Used',
                       '300': 'Multiple Choices',
                       '301': 'Moved Permanently',
                       '302': 'Found',
                       '303': 'See Other',
                       '304': 'Not Modified',
                       '305': 'Use Proxy',
                       '307': 'Temporary Redirect',
                       '308': 'Permanent Redirect',
                       '400': 'Bad Request',
                       '401': 'Unauthorized',
                       '402': 'Payment Required',
                       '403': 'Forbidden',
                       '404': 'Not Found',
                       '405': 'Method Not Allowed',
                       '406': 'Not Acceptable',
                       '407': 'Proxy Authentication Required',
                       '408': 'Request Timeout',
                       '409': 'Conflict',
                       '410': 'Gone',
                       '411': 'Length Required',
                       '412': 'Precondition Failed',
                       '413': 'Payload Too Large',
                       '414': 'URI Too Long',
                       '415': 'Unsupported Media Type',
                       '416': 'Range Not Satisfiable',
                       '417': 'Expectation Failed',
                       '418': "I'm a Teapot",
                       '421': 'Misdirected Request',
                       '422': 'Unprocessable Entity',
                       '423': 'Locked',
                       '424': 'Failed Dependency',
                       '425': 'Unordered Collection',
                       '426': 'Upgrade Required',
                       '428': 'Precondition Required',
                       '429': 'Too Many Requests',
                       '431': 'Request Header Fields Too Large',
                       '451': 'Unavailable For Legal Reasons',
                       '500': 'Internal Server Error',
                       '501': 'Not Implemented',
                       '502': 'Bad Gateway',
                       '503': 'Service Unavailable',
                       '504': 'Gateway Timeout',
                       '505': 'HTTP Version Not Supported',
                       '506': 'Variant Also Negotiates',
                       '507': 'Insufficient Storage',
                       '508': 'Loop Detected',
                       '509': 'Bandwidth Limit Exceeded',
                       '510': 'Not Extended',
                       '511': 'Network Authentication Required' },
                    Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] },
                 'https:':
                  { Agent: [Function: Agent],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 443,
                       protocol: 'https:',
                       options: { path: null },
                       requests: {},
                       sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256,
                       maxCachedSessions: 100,
                       _sessionCache:
                        { map:
                           { 'spark.embiq.com:443::::::::::::::::':
                              <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                          list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] } },
              port: 443,
              hostname: 'spark.embiq.com',
              auth: undefined,
              agent: undefined,
              headers:
               { Accept: 'application/json, text/plain, */*',
                 'Content-Type': 'application/json;charset=utf-8',
                 'User-Agent': 'axios/0.18.0',
                 'Content-Length': 40 },
              method: 'post',
              path: null,
              protocol: 'https:',
              maxBodyLength: 10485760,
              maxRedirects: 21,
              _defaultAgent:
               Agent {
                 _events: [Object: null prototype] { free: [Function] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 defaultPort: 443,
                 protocol: 'https:',
                 options: { path: null },
                 requests: {},
                 sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                 freeSockets: {},
                 keepAliveMsecs: 1000,
                 keepAlive: false,
                 maxSockets: Infinity,
                 maxFreeSockets: 256,
                 maxCachedSessions: 100,
                 _sessionCache:
                  { map:
                     { 'spark.embiq.com:443::::::::::::::::':
                        <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                    list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
              servername: 'spark.embiq.com',
              singleUse: true } },
        connection:
         TLSSocket {
           _tlsOptions:
            { pipe: false,
              secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined },
           _secureEstablished: true,
           _securePending: false,
           _newSessionPending: false,
           _controlReleased: true,
           _SNICallback: null,
           servername: 'spark.embiq.com',
           alpnProtocol: false,
           authorized: true,
           authorizationError: null,
           encrypted: true,
           _events:
            [Object: null prototype] {
              close:
               [ [Function: onSocketCloseDestroySSL],
                 { [Function: bound onceWrapper] listener: [Function] },
                 [Function: onClose],
                 [Function: socketCloseListener] ],
              end: [Function: onReadableStreamEnd],
              secure: [Function: onConnectSecure],
              free: [Function: onFree],
              agentRemove: [Function: onRemove],
              drain: [Function: ondrain],
              error: [Function: socketErrorListener],
              finish:
               { [Function: bound onceWrapper] listener: [Function: destroy] } },
           _eventsCount: 8,
           connecting: false,
           _hadError: false,
           _handle:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _parent: null,
           _host: 'spark.embiq.com',
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree:
               { next:
                  { next: null,
                    entry: null,
                    finish: [Function: bound onCorkedFinish] },
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: false,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: undefined,
           _server: null,
           ssl:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _requestCert: true,
           _rejectUnauthorized: true,
           parser: null,
           _httpMessage: [Circular],
           [Symbol(res)]:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           [Symbol(asyncId)]: 7,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0,
           [Symbol(connect-options)]:
            { rejectUnauthorized: true,
              ciphers:
               'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              encoding: null,
              _agentKey: 'spark.embiq.com:443::::::::::::::::',
              host: 'spark.embiq.com',
              pathname: '/api/config/tag_positions',
              nativeProtocols:
               { 'http:':
                  { _connectionListener: [Function: connectionListener],
                    METHODS:
                     [ 'ACL',
                       'BIND',
                       'CHECKOUT',
                       'CONNECT',
                       'COPY',
                       'DELETE',
                       'GET',
                       'HEAD',
                       'LINK',
                       'LOCK',
                       'M-SEARCH',
                       'MERGE',
                       'MKACTIVITY',
                       'MKCALENDAR',
                       'MKCOL',
                       'MOVE',
                       'NOTIFY',
                       'OPTIONS',
                       'PATCH',
                       'POST',
                       'PROPFIND',
                       'PROPPATCH',
                       'PURGE',
                       'PUT',
                       'REBIND',
                       'REPORT',
                       'SEARCH',
                       'SOURCE',
                       'SUBSCRIBE',
                       'TRACE',
                       'UNBIND',
                       'UNLINK',
                       'UNLOCK',
                       'UNSUBSCRIBE' ],
                    STATUS_CODES:
                     { '100': 'Continue',
                       '101': 'Switching Protocols',
                       '102': 'Processing',
                       '103': 'Early Hints',
                       '200': 'OK',
                       '201': 'Created',
                       '202': 'Accepted',
                       '203': 'Non-Authoritative Information',
                       '204': 'No Content',
                       '205': 'Reset Content',
                       '206': 'Partial Content',
                       '207': 'Multi-Status',
                       '208': 'Already Reported',
                       '226': 'IM Used',
                       '300': 'Multiple Choices',
                       '301': 'Moved Permanently',
                       '302': 'Found',
                       '303': 'See Other',
                       '304': 'Not Modified',
                       '305': 'Use Proxy',
                       '307': 'Temporary Redirect',
                       '308': 'Permanent Redirect',
                       '400': 'Bad Request',
                       '401': 'Unauthorized',
                       '402': 'Payment Required',
                       '403': 'Forbidden',
                       '404': 'Not Found',
                       '405': 'Method Not Allowed',
                       '406': 'Not Acceptable',
                       '407': 'Proxy Authentication Required',
                       '408': 'Request Timeout',
                       '409': 'Conflict',
                       '410': 'Gone',
                       '411': 'Length Required',
                       '412': 'Precondition Failed',
                       '413': 'Payload Too Large',
                       '414': 'URI Too Long',
                       '415': 'Unsupported Media Type',
                       '416': 'Range Not Satisfiable',
                       '417': 'Expectation Failed',
                       '418': "I'm a Teapot",
                       '421': 'Misdirected Request',
                       '422': 'Unprocessable Entity',
                       '423': 'Locked',
                       '424': 'Failed Dependency',
                       '425': 'Unordered Collection',
                       '426': 'Upgrade Required',
                       '428': 'Precondition Required',
                       '429': 'Too Many Requests',
                       '431': 'Request Header Fields Too Large',
                       '451': 'Unavailable For Legal Reasons',
                       '500': 'Internal Server Error',
                       '501': 'Not Implemented',
                       '502': 'Bad Gateway',
                       '503': 'Service Unavailable',
                       '504': 'Gateway Timeout',
                       '505': 'HTTP Version Not Supported',
                       '506': 'Variant Also Negotiates',
                       '507': 'Insufficient Storage',
                       '508': 'Loop Detected',
                       '509': 'Bandwidth Limit Exceeded',
                       '510': 'Not Extended',
                       '511': 'Network Authentication Required' },
                    Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] },
                 'https:':
                  { Agent: [Function: Agent],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 443,
                       protocol: 'https:',
                       options: { path: null },
                       requests: {},
                       sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256,
                       maxCachedSessions: 100,
                       _sessionCache:
                        { map:
                           { 'spark.embiq.com:443::::::::::::::::':
                              <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                          list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] } },
              port: 443,
              hostname: 'spark.embiq.com',
              auth: undefined,
              agent: undefined,
              headers:
               { Accept: 'application/json, text/plain, */*',
                 'Content-Type': 'application/json;charset=utf-8',
                 'User-Agent': 'axios/0.18.0',
                 'Content-Length': 40 },
              method: 'post',
              path: null,
              protocol: 'https:',
              maxBodyLength: 10485760,
              maxRedirects: 21,
              _defaultAgent:
               Agent {
                 _events: [Object: null prototype] { free: [Function] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 defaultPort: 443,
                 protocol: 'https:',
                 options: { path: null },
                 requests: {},
                 sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                 freeSockets: {},
                 keepAliveMsecs: 1000,
                 keepAlive: false,
                 maxSockets: Infinity,
                 maxFreeSockets: 256,
                 maxCachedSessions: 100,
                 _sessionCache:
                  { map:
                     { 'spark.embiq.com:443::::::::::::::::':
                        <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                    list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
              servername: 'spark.embiq.com',
              singleUse: true } },
        _header:
         'POST /api/config/tag_positions HTTP/1.1\r\nAccept: application/json, text/plain, */*\r\nContent-Type: application/json;charset=utf-8\r\nUser-Agent: axios/0.18.0\r\nContent-Length: 40\r\nHost: spark.embiq.com\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent:
         Agent {
           _events: [Object: null prototype] { free: [Function] },
           _eventsCount: 1,
           _maxListeners: undefined,
           defaultPort: 443,
           protocol: 'https:',
           options: { path: null },
           requests: {},
           sockets:
            { 'spark.embiq.com:443::::::::::::::::':
               [ TLSSocket {
                   _tlsOptions:
                    { pipe: false,
                      secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: true,
                      session: undefined,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined },
                   _secureEstablished: true,
                   _securePending: false,
                   _newSessionPending: false,
                   _controlReleased: true,
                   _SNICallback: null,
                   servername: 'spark.embiq.com',
                   alpnProtocol: false,
                   authorized: true,
                   authorizationError: null,
                   encrypted: true,
                   _events:
                    [Object: null prototype] {
                      close:
                       [ [Function: onSocketCloseDestroySSL],
                         { [Function: bound onceWrapper] listener: [Function] },
                         [Function: onClose],
                         [Function: socketCloseListener] ],
                      end: [Function: onReadableStreamEnd],
                      secure: [Function: onConnectSecure],
                      free: [Function: onFree],
                      agentRemove: [Function: onRemove],
                      drain: [Function: ondrain],
                      error: [Function: socketErrorListener],
                      finish:
                       { [Function: bound onceWrapper] listener: [Function: destroy] } },
                   _eventsCount: 8,
                   connecting: false,
                   _hadError: false,
                   _handle:
                    TLSWrap {
                      _parent:
                       TCP {
                         reading: [Getter/Setter],
                         onread: null,
                         onconnection: null,
                         [Symbol(owner)]: [Circular] },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                      reading: true,
                      onread: [Function: onStreamRead],
                      onhandshakestart: [Function: noop],
                      onhandshakedone: [Function: bound ],
                      onocspresponse: [Function: onocspresponse],
                      onerror: [Function: onerror],
                      [Symbol(owner)]: [Circular] },
                   _parent: null,
                   _host: 'spark.embiq.com',
                   _readableState:
                    ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: null,
                      pipesCount: 0,
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      emitClose: false,
                      autoDestroy: false,
                      destroyed: false,
                      defaultEncoding: 'utf8',
                      awaitDrain: 0,
                      readingMore: false,
                      decoder: null,
                      encoding: null },
                   readable: true,
                   _maxListeners: undefined,
                   _writableState:
                    WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: true,
                      needDrain: false,
                      ending: true,
                      ended: true,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      bufferedRequest: null,
                      lastBufferedRequest: null,
                      pendingcb: 1,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: false,
                      bufferedRequestCount: 0,
                      corkedRequestsFree:
                       { next:
                          { next: null,
                            entry: null,
                            finish: [Function: bound onCorkedFinish] },
                         entry: null,
                         finish: [Function: bound onCorkedFinish] } },
                   writable: false,
                   allowHalfOpen: false,
                   _sockname: null,
                   _pendingData: null,
                   _pendingEncoding: '',
                   server: undefined,
                   _server: null,
                   ssl:
                    TLSWrap {
                      _parent:
                       TCP {
                         reading: [Getter/Setter],
                         onread: null,
                         onconnection: null,
                         [Symbol(owner)]: [Circular] },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                      reading: true,
                      onread: [Function: onStreamRead],
                      onhandshakestart: [Function: noop],
                      onhandshakedone: [Function: bound ],
                      onocspresponse: [Function: onocspresponse],
                      onerror: [Function: onerror],
                      [Symbol(owner)]: [Circular] },
                   _requestCert: true,
                   _rejectUnauthorized: true,
                   parser: null,
                   _httpMessage: [Circular],
                   [Symbol(res)]:
                    TLSWrap {
                      _parent:
                       TCP {
                         reading: [Getter/Setter],
                         onread: null,
                         onconnection: null,
                         [Symbol(owner)]: [Circular] },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                      reading: true,
                      onread: [Function: onStreamRead],
                      onhandshakestart: [Function: noop],
                      onhandshakedone: [Function: bound ],
                      onocspresponse: [Function: onocspresponse],
                      onerror: [Function: onerror],
                      [Symbol(owner)]: [Circular] },
                   [Symbol(asyncId)]: 7,
                   [Symbol(lastWriteQueueSize)]: 0,
                   [Symbol(timeout)]: null,
                   [Symbol(kBytesRead)]: 0,
                   [Symbol(kBytesWritten)]: 0,
                   [Symbol(connect-options)]:
                    { rejectUnauthorized: true,
                      ciphers:
                       'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: [Function: checkServerIdentity],
                      minDHSize: 1024,
                      encoding: null,
                      _agentKey: 'spark.embiq.com:443::::::::::::::::',
                      host: 'spark.embiq.com',
                      pathname: '/api/config/tag_positions',
                      nativeProtocols:
                       { 'http:':
                          { _connectionListener: [Function: connectionListener],
                            METHODS:
                             [ 'ACL',
                               'BIND',
                               'CHECKOUT',
                               'CONNECT',
                               'COPY',
                               'DELETE',
                               'GET',
                               'HEAD',
                               'LINK',
                               'LOCK',
                               'M-SEARCH',
                               'MERGE',
                               'MKACTIVITY',
                               'MKCALENDAR',
                               'MKCOL',
                               'MOVE',
                               'NOTIFY',
                               'OPTIONS',
                               'PATCH',
                               'POST',
                               'PROPFIND',
                               'PROPPATCH',
                               'PURGE',
                               'PUT',
                               'REBIND',
                               'REPORT',
                               'SEARCH',
                               'SOURCE',
                               'SUBSCRIBE',
                               'TRACE',
                               'UNBIND',
                               'UNLINK',
                               'UNLOCK',
                               'UNSUBSCRIBE' ],
                            STATUS_CODES:
                             { '100': 'Continue',
                               '101': 'Switching Protocols',
                               '102': 'Processing',
                               '103': 'Early Hints',
                               '200': 'OK',
                               '201': 'Created',
                               '202': 'Accepted',
                               '203': 'Non-Authoritative Information',
                               '204': 'No Content',
                               '205': 'Reset Content',
                               '206': 'Partial Content',
                               '207': 'Multi-Status',
                               '208': 'Already Reported',
                               '226': 'IM Used',
                               '300': 'Multiple Choices',
                               '301': 'Moved Permanently',
                               '302': 'Found',
                               '303': 'See Other',
                               '304': 'Not Modified',
                               '305': 'Use Proxy',
                               '307': 'Temporary Redirect',
                               '308': 'Permanent Redirect',
                               '400': 'Bad Request',
                               '401': 'Unauthorized',
                               '402': 'Payment Required',
                               '403': 'Forbidden',
                               '404': 'Not Found',
                               '405': 'Method Not Allowed',
                               '406': 'Not Acceptable',
                               '407': 'Proxy Authentication Required',
                               '408': 'Request Timeout',
                               '409': 'Conflict',
                               '410': 'Gone',
                               '411': 'Length Required',
                               '412': 'Precondition Failed',
                               '413': 'Payload Too Large',
                               '414': 'URI Too Long',
                               '415': 'Unsupported Media Type',
                               '416': 'Range Not Satisfiable',
                               '417': 'Expectation Failed',
                               '418': "I'm a Teapot",
                               '421': 'Misdirected Request',
                               '422': 'Unprocessable Entity',
                               '423': 'Locked',
                               '424': 'Failed Dependency',
                               '425': 'Unordered Collection',
                               '426': 'Upgrade Required',
                               '428': 'Precondition Required',
                               '429': 'Too Many Requests',
                               '431': 'Request Header Fields Too Large',
                               '451': 'Unavailable For Legal Reasons',
                               '500': 'Internal Server Error',
                               '501': 'Not Implemented',
                               '502': 'Bad Gateway',
                               '503': 'Service Unavailable',
                               '504': 'Gateway Timeout',
                               '505': 'HTTP Version Not Supported',
                               '506': 'Variant Also Negotiates',
                               '507': 'Insufficient Storage',
                               '508': 'Loop Detected',
                               '509': 'Bandwidth Limit Exceeded',
                               '510': 'Not Extended',
                               '511': 'Network Authentication Required' },
                            Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                            ClientRequest: [Function: ClientRequest],
                            globalAgent:
                             Agent {
                               _events: [Object: null prototype] { free: [Function] },
                               _eventsCount: 1,
                               _maxListeners: undefined,
                               defaultPort: 80,
                               protocol: 'http:',
                               options: { path: null },
                               requests: {},
                               sockets: {},
                               freeSockets: {},
                               keepAliveMsecs: 1000,
                               keepAlive: false,
                               maxSockets: Infinity,
                               maxFreeSockets: 256 },
                            IncomingMessage: [Function: IncomingMessage],
                            OutgoingMessage: [Function: OutgoingMessage],
                            Server: [Function: Server],
                            ServerResponse: [Function: ServerResponse],
                            createServer: [Function: createServer],
                            get: [Function: get],
                            request: [Function: request] },
                         'https:':
                          { Agent: [Function: Agent],
                            globalAgent: [Circular],
                            Server: [Function: Server],
                            createServer: [Function: createServer],
                            get: [Function: get],
                            request: [Function: request] } },
                      port: 443,
                      hostname: 'spark.embiq.com',
                      auth: undefined,
                      agent: undefined,
                      headers:
                       { Accept: 'application/json, text/plain, */*',
                         'Content-Type': 'application/json;charset=utf-8',
                         'User-Agent': 'axios/0.18.0',
                         'Content-Length': 40 },
                      method: 'post',
                      path: null,
                      protocol: 'https:',
                      maxBodyLength: 10485760,
                      maxRedirects: 21,
                      _defaultAgent: [Circular],
                      servername: 'spark.embiq.com',
                      singleUse: true } } ] },
           freeSockets: {},
           keepAliveMsecs: 1000,
           keepAlive: false,
           maxSockets: Infinity,
           maxFreeSockets: 256,
           maxCachedSessions: 100,
           _sessionCache:
            { map:
               { 'spark.embiq.com:443::::::::::::::::':
                  <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
              list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/api/config/tag_positions',
        _ended: true,
        res:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: true,
              endEmitted: true,
              reading: false,
              sync: true,
              needReadable: false,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: true,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: true,
              decoder: null,
              encoding: null },
           readable: false,
           _events:
            [Object: null prototype] {
              end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
              data: [Function: handleStreamData],
              error: [Function: handleStreamError] },
           _eventsCount: 3,
           _maxListeners: undefined,
           socket:
            TLSSocket {
              _tlsOptions:
               { pipe: false,
                 secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 isServer: false,
                 requestCert: true,
                 rejectUnauthorized: true,
                 session: undefined,
                 ALPNProtocols: undefined,
                 requestOCSP: undefined },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              _SNICallback: null,
              servername: 'spark.embiq.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events:
               [Object: null prototype] {
                 close:
                  [ [Function: onSocketCloseDestroySSL],
                    { [Function: bound onceWrapper] listener: [Function] },
                    [Function: onClose],
                    [Function: socketCloseListener] ],
                 end: [Function: onReadableStreamEnd],
                 secure: [Function: onConnectSecure],
                 free: [Function: onFree],
                 agentRemove: [Function: onRemove],
                 drain: [Function: ondrain],
                 error: [Function: socketErrorListener],
                 finish:
                  { [Function: bound onceWrapper] listener: [Function: destroy] } },
              _eventsCount: 8,
              connecting: false,
              _hadError: false,
              _handle:
               TLSWrap {
                 _parent:
                  TCP {
                    reading: [Getter/Setter],
                    onread: null,
                    onconnection: null,
                    [Symbol(owner)]: [Circular] },
                 _parentWrap: undefined,
                 _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 reading: true,
                 onread: [Function: onStreamRead],
                 onhandshakestart: [Function: noop],
                 onhandshakedone: [Function: bound ],
                 onocspresponse: [Function: onocspresponse],
                 onerror: [Function: onerror],
                 [Symbol(owner)]: [Circular] },
              _parent: null,
              _host: 'spark.embiq.com',
              _readableState:
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: BufferList { head: null, tail: null, length: 0 },
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: true,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 emitClose: false,
                 autoDestroy: false,
                 destroyed: false,
                 defaultEncoding: 'utf8',
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              _maxListeners: undefined,
              _writableState:
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 finalCalled: true,
                 needDrain: false,
                 ending: true,
                 ended: true,
                 finished: false,
                 destroyed: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: false,
                 bufferProcessing: false,
                 onwrite: [Function: bound onwrite],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 1,
                 prefinished: false,
                 errorEmitted: false,
                 emitClose: false,
                 autoDestroy: false,
                 bufferedRequestCount: 0,
                 corkedRequestsFree:
                  { next:
                     { next: null,
                       entry: null,
                       finish: [Function: bound onCorkedFinish] },
                    entry: null,
                    finish: [Function: bound onCorkedFinish] } },
              writable: false,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl:
               TLSWrap {
                 _parent:
                  TCP {
                    reading: [Getter/Setter],
                    onread: null,
                    onconnection: null,
                    [Symbol(owner)]: [Circular] },
                 _parentWrap: undefined,
                 _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 reading: true,
                 onread: [Function: onStreamRead],
                 onhandshakestart: [Function: noop],
                 onhandshakedone: [Function: bound ],
                 onocspresponse: [Function: onocspresponse],
                 onerror: [Function: onerror],
                 [Symbol(owner)]: [Circular] },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular],
              [Symbol(res)]:
               TLSWrap {
                 _parent:
                  TCP {
                    reading: [Getter/Setter],
                    onread: null,
                    onconnection: null,
                    [Symbol(owner)]: [Circular] },
                 _parentWrap: undefined,
                 _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 reading: true,
                 onread: [Function: onStreamRead],
                 onhandshakestart: [Function: noop],
                 onhandshakedone: [Function: bound ],
                 onocspresponse: [Function: onocspresponse],
                 onerror: [Function: onerror],
                 [Symbol(owner)]: [Circular] },
              [Symbol(asyncId)]: 7,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]:
               { rejectUnauthorized: true,
                 ciphers:
                  'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                 checkServerIdentity: [Function: checkServerIdentity],
                 minDHSize: 1024,
                 encoding: null,
                 _agentKey: 'spark.embiq.com:443::::::::::::::::',
                 host: 'spark.embiq.com',
                 pathname: '/api/config/tag_positions',
                 nativeProtocols:
                  { 'http:':
                     { _connectionListener: [Function: connectionListener],
                       METHODS:
                        [ 'ACL',
                          'BIND',
                          'CHECKOUT',
                          'CONNECT',
                          'COPY',
                          'DELETE',
                          'GET',
                          'HEAD',
                          'LINK',
                          'LOCK',
                          'M-SEARCH',
                          'MERGE',
                          'MKACTIVITY',
                          'MKCALENDAR',
                          'MKCOL',
                          'MOVE',
                          'NOTIFY',
                          'OPTIONS',
                          'PATCH',
                          'POST',
                          'PROPFIND',
                          'PROPPATCH',
                          'PURGE',
                          'PUT',
                          'REBIND',
                          'REPORT',
                          'SEARCH',
                          'SOURCE',
                          'SUBSCRIBE',
                          'TRACE',
                          'UNBIND',
                          'UNLINK',
                          'UNLOCK',
                          'UNSUBSCRIBE' ],
                       STATUS_CODES:
                        { '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Unordered Collection',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required' },
                       Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                       ClientRequest: [Function: ClientRequest],
                       globalAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       IncomingMessage: [Function: IncomingMessage],
                       OutgoingMessage: [Function: OutgoingMessage],
                       Server: [Function: Server],
                       ServerResponse: [Function: ServerResponse],
                       createServer: [Function: createServer],
                       get: [Function: get],
                       request: [Function: request] },
                    'https:':
                     { Agent: [Function: Agent],
                       globalAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: { path: null },
                          requests: {},
                          sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          maxCachedSessions: 100,
                          _sessionCache:
                           { map:
                              { 'spark.embiq.com:443::::::::::::::::':
                                 <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                             list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                       Server: [Function: Server],
                       createServer: [Function: createServer],
                       get: [Function: get],
                       request: [Function: request] } },
                 port: 443,
                 hostname: 'spark.embiq.com',
                 auth: undefined,
                 agent: undefined,
                 headers:
                  { Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json;charset=utf-8',
                    'User-Agent': 'axios/0.18.0',
                    'Content-Length': 40 },
                 method: 'post',
                 path: null,
                 protocol: 'https:',
                 maxBodyLength: 10485760,
                 maxRedirects: 21,
                 _defaultAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: { path: null },
                    requests: {},
                    sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    maxCachedSessions: 100,
                    _sessionCache:
                     { map:
                        { 'spark.embiq.com:443::::::::::::::::':
                           <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                       list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                 servername: 'spark.embiq.com',
                 singleUse: true } },
           connection:
            TLSSocket {
              _tlsOptions:
               { pipe: false,
                 secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 isServer: false,
                 requestCert: true,
                 rejectUnauthorized: true,
                 session: undefined,
                 ALPNProtocols: undefined,
                 requestOCSP: undefined },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              _SNICallback: null,
              servername: 'spark.embiq.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events:
               [Object: null prototype] {
                 close:
                  [ [Function: onSocketCloseDestroySSL],
                    { [Function: bound onceWrapper] listener: [Function] },
                    [Function: onClose],
                    [Function: socketCloseListener] ],
                 end: [Function: onReadableStreamEnd],
                 secure: [Function: onConnectSecure],
                 free: [Function: onFree],
                 agentRemove: [Function: onRemove],
                 drain: [Function: ondrain],
                 error: [Function: socketErrorListener],
                 finish:
                  { [Function: bound onceWrapper] listener: [Function: destroy] } },
              _eventsCount: 8,
              connecting: false,
              _hadError: false,
              _handle:
               TLSWrap {
                 _parent:
                  TCP {
                    reading: [Getter/Setter],
                    onread: null,
                    onconnection: null,
                    [Symbol(owner)]: [Circular] },
                 _parentWrap: undefined,
                 _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 reading: true,
                 onread: [Function: onStreamRead],
                 onhandshakestart: [Function: noop],
                 onhandshakedone: [Function: bound ],
                 onocspresponse: [Function: onocspresponse],
                 onerror: [Function: onerror],
                 [Symbol(owner)]: [Circular] },
              _parent: null,
              _host: 'spark.embiq.com',
              _readableState:
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: BufferList { head: null, tail: null, length: 0 },
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: true,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 emitClose: false,
                 autoDestroy: false,
                 destroyed: false,
                 defaultEncoding: 'utf8',
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              _maxListeners: undefined,
              _writableState:
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 finalCalled: true,
                 needDrain: false,
                 ending: true,
                 ended: true,
                 finished: false,
                 destroyed: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: false,
                 bufferProcessing: false,
                 onwrite: [Function: bound onwrite],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 1,
                 prefinished: false,
                 errorEmitted: false,
                 emitClose: false,
                 autoDestroy: false,
                 bufferedRequestCount: 0,
                 corkedRequestsFree:
                  { next:
                     { next: null,
                       entry: null,
                       finish: [Function: bound onCorkedFinish] },
                    entry: null,
                    finish: [Function: bound onCorkedFinish] } },
              writable: false,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl:
               TLSWrap {
                 _parent:
                  TCP {
                    reading: [Getter/Setter],
                    onread: null,
                    onconnection: null,
                    [Symbol(owner)]: [Circular] },
                 _parentWrap: undefined,
                 _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 reading: true,
                 onread: [Function: onStreamRead],
                 onhandshakestart: [Function: noop],
                 onhandshakedone: [Function: bound ],
                 onocspresponse: [Function: onocspresponse],
                 onerror: [Function: onerror],
                 [Symbol(owner)]: [Circular] },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular],
              [Symbol(res)]:
               TLSWrap {
                 _parent:
                  TCP {
                    reading: [Getter/Setter],
                    onread: null,
                    onconnection: null,
                    [Symbol(owner)]: [Circular] },
                 _parentWrap: undefined,
                 _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 reading: true,
                 onread: [Function: onStreamRead],
                 onhandshakestart: [Function: noop],
                 onhandshakedone: [Function: bound ],
                 onocspresponse: [Function: onocspresponse],
                 onerror: [Function: onerror],
                 [Symbol(owner)]: [Circular] },
              [Symbol(asyncId)]: 7,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]:
               { rejectUnauthorized: true,
                 ciphers:
                  'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                 checkServerIdentity: [Function: checkServerIdentity],
                 minDHSize: 1024,
                 encoding: null,
                 _agentKey: 'spark.embiq.com:443::::::::::::::::',
                 host: 'spark.embiq.com',
                 pathname: '/api/config/tag_positions',
                 nativeProtocols:
                  { 'http:':
                     { _connectionListener: [Function: connectionListener],
                       METHODS:
                        [ 'ACL',
                          'BIND',
                          'CHECKOUT',
                          'CONNECT',
                          'COPY',
                          'DELETE',
                          'GET',
                          'HEAD',
                          'LINK',
                          'LOCK',
                          'M-SEARCH',
                          'MERGE',
                          'MKACTIVITY',
                          'MKCALENDAR',
                          'MKCOL',
                          'MOVE',
                          'NOTIFY',
                          'OPTIONS',
                          'PATCH',
                          'POST',
                          'PROPFIND',
                          'PROPPATCH',
                          'PURGE',
                          'PUT',
                          'REBIND',
                          'REPORT',
                          'SEARCH',
                          'SOURCE',
                          'SUBSCRIBE',
                          'TRACE',
                          'UNBIND',
                          'UNLINK',
                          'UNLOCK',
                          'UNSUBSCRIBE' ],
                       STATUS_CODES:
                        { '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Unordered Collection',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required' },
                       Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                       ClientRequest: [Function: ClientRequest],
                       globalAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       IncomingMessage: [Function: IncomingMessage],
                       OutgoingMessage: [Function: OutgoingMessage],
                       Server: [Function: Server],
                       ServerResponse: [Function: ServerResponse],
                       createServer: [Function: createServer],
                       get: [Function: get],
                       request: [Function: request] },
                    'https:':
                     { Agent: [Function: Agent],
                       globalAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: { path: null },
                          requests: {},
                          sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          maxCachedSessions: 100,
                          _sessionCache:
                           { map:
                              { 'spark.embiq.com:443::::::::::::::::':
                                 <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                             list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                       Server: [Function: Server],
                       createServer: [Function: createServer],
                       get: [Function: get],
                       request: [Function: request] } },
                 port: 443,
                 hostname: 'spark.embiq.com',
                 auth: undefined,
                 agent: undefined,
                 headers:
                  { Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json;charset=utf-8',
                    'User-Agent': 'axios/0.18.0',
                    'Content-Length': 40 },
                 method: 'post',
                 path: null,
                 protocol: 'https:',
                 maxBodyLength: 10485760,
                 maxRedirects: 21,
                 _defaultAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: { path: null },
                    requests: {},
                    sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    maxCachedSessions: 100,
                    _sessionCache:
                     { map:
                        { 'spark.embiq.com:443::::::::::::::::':
                           <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                       list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                 servername: 'spark.embiq.com',
                 singleUse: true } },
           httpVersionMajor: 1,
           httpVersionMinor: 1,
           httpVersion: '1.1',
           complete: true,
           headers:
            { server: 'nginx',
              date: 'Tue, 19 Feb 2019 09:53:01 GMT',
              'content-type': 'text/html',
              'content-length': '27',
              connection: 'close',
              'x-frame-options': 'SAMEORIGIN',
              vary: 'Origin' },
           rawHeaders:
            [ 'Server',
              'nginx',
              'Date',
              'Tue, 19 Feb 2019 09:53:01 GMT',
              'Content-Type',
              'text/html',
              'Content-Length',
              '27',
              'Connection',
              'close',
              'X-Frame-Options',
              'SAMEORIGIN',
              'Vary',
              'Origin' ],
           trailers: {},
           rawTrailers: [],
           aborted: false,
           upgrade: false,
           url: '',
           method: null,
           statusCode: 500,
           statusMessage: 'Internal Server Error',
           client:
            TLSSocket {
              _tlsOptions:
               { pipe: false,
                 secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 isServer: false,
                 requestCert: true,
                 rejectUnauthorized: true,
                 session: undefined,
                 ALPNProtocols: undefined,
                 requestOCSP: undefined },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              _SNICallback: null,
              servername: 'spark.embiq.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events:
               [Object: null prototype] {
                 close:
                  [ [Function: onSocketCloseDestroySSL],
                    { [Function: bound onceWrapper] listener: [Function] },
                    [Function: onClose],
                    [Function: socketCloseListener] ],
                 end: [Function: onReadableStreamEnd],
                 secure: [Function: onConnectSecure],
                 free: [Function: onFree],
                 agentRemove: [Function: onRemove],
                 drain: [Function: ondrain],
                 error: [Function: socketErrorListener],
                 finish:
                  { [Function: bound onceWrapper] listener: [Function: destroy] } },
              _eventsCount: 8,
              connecting: false,
              _hadError: false,
              _handle:
               TLSWrap {
                 _parent:
                  TCP {
                    reading: [Getter/Setter],
                    onread: null,
                    onconnection: null,
                    [Symbol(owner)]: [Circular] },
                 _parentWrap: undefined,
                 _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 reading: true,
                 onread: [Function: onStreamRead],
                 onhandshakestart: [Function: noop],
                 onhandshakedone: [Function: bound ],
                 onocspresponse: [Function: onocspresponse],
                 onerror: [Function: onerror],
                 [Symbol(owner)]: [Circular] },
              _parent: null,
              _host: 'spark.embiq.com',
              _readableState:
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: BufferList { head: null, tail: null, length: 0 },
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: true,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 emitClose: false,
                 autoDestroy: false,
                 destroyed: false,
                 defaultEncoding: 'utf8',
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              _maxListeners: undefined,
              _writableState:
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 finalCalled: true,
                 needDrain: false,
                 ending: true,
                 ended: true,
                 finished: false,
                 destroyed: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: false,
                 bufferProcessing: false,
                 onwrite: [Function: bound onwrite],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 1,
                 prefinished: false,
                 errorEmitted: false,
                 emitClose: false,
                 autoDestroy: false,
                 bufferedRequestCount: 0,
                 corkedRequestsFree:
                  { next:
                     { next: null,
                       entry: null,
                       finish: [Function: bound onCorkedFinish] },
                    entry: null,
                    finish: [Function: bound onCorkedFinish] } },
              writable: false,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl:
               TLSWrap {
                 _parent:
                  TCP {
                    reading: [Getter/Setter],
                    onread: null,
                    onconnection: null,
                    [Symbol(owner)]: [Circular] },
                 _parentWrap: undefined,
                 _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 reading: true,
                 onread: [Function: onStreamRead],
                 onhandshakestart: [Function: noop],
                 onhandshakedone: [Function: bound ],
                 onocspresponse: [Function: onocspresponse],
                 onerror: [Function: onerror],
                 [Symbol(owner)]: [Circular] },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular],
              [Symbol(res)]:
               TLSWrap {
                 _parent:
                  TCP {
                    reading: [Getter/Setter],
                    onread: null,
                    onconnection: null,
                    [Symbol(owner)]: [Circular] },
                 _parentWrap: undefined,
                 _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 reading: true,
                 onread: [Function: onStreamRead],
                 onhandshakestart: [Function: noop],
                 onhandshakedone: [Function: bound ],
                 onocspresponse: [Function: onocspresponse],
                 onerror: [Function: onerror],
                 [Symbol(owner)]: [Circular] },
              [Symbol(asyncId)]: 7,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]:
               { rejectUnauthorized: true,
                 ciphers:
                  'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                 checkServerIdentity: [Function: checkServerIdentity],
                 minDHSize: 1024,
                 encoding: null,
                 _agentKey: 'spark.embiq.com:443::::::::::::::::',
                 host: 'spark.embiq.com',
                 pathname: '/api/config/tag_positions',
                 nativeProtocols:
                  { 'http:':
                     { _connectionListener: [Function: connectionListener],
                       METHODS:
                        [ 'ACL',
                          'BIND',
                          'CHECKOUT',
                          'CONNECT',
                          'COPY',
                          'DELETE',
                          'GET',
                          'HEAD',
                          'LINK',
                          'LOCK',
                          'M-SEARCH',
                          'MERGE',
                          'MKACTIVITY',
                          'MKCALENDAR',
                          'MKCOL',
                          'MOVE',
                          'NOTIFY',
                          'OPTIONS',
                          'PATCH',
                          'POST',
                          'PROPFIND',
                          'PROPPATCH',
                          'PURGE',
                          'PUT',
                          'REBIND',
                          'REPORT',
                          'SEARCH',
                          'SOURCE',
                          'SUBSCRIBE',
                          'TRACE',
                          'UNBIND',
                          'UNLINK',
                          'UNLOCK',
                          'UNSUBSCRIBE' ],
                       STATUS_CODES:
                        { '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Unordered Collection',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required' },
                       Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                       ClientRequest: [Function: ClientRequest],
                       globalAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       IncomingMessage: [Function: IncomingMessage],
                       OutgoingMessage: [Function: OutgoingMessage],
                       Server: [Function: Server],
                       ServerResponse: [Function: ServerResponse],
                       createServer: [Function: createServer],
                       get: [Function: get],
                       request: [Function: request] },
                    'https:':
                     { Agent: [Function: Agent],
                       globalAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: { path: null },
                          requests: {},
                          sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          maxCachedSessions: 100,
                          _sessionCache:
                           { map:
                              { 'spark.embiq.com:443::::::::::::::::':
                                 <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                             list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                       Server: [Function: Server],
                       createServer: [Function: createServer],
                       get: [Function: get],
                       request: [Function: request] } },
                 port: 443,
                 hostname: 'spark.embiq.com',
                 auth: undefined,
                 agent: undefined,
                 headers:
                  { Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json;charset=utf-8',
                    'User-Agent': 'axios/0.18.0',
                    'Content-Length': 40 },
                 method: 'post',
                 path: null,
                 protocol: 'https:',
                 maxBodyLength: 10485760,
                 maxRedirects: 21,
                 _defaultAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: { path: null },
                    requests: {},
                    sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    maxCachedSessions: 100,
                    _sessionCache:
                     { map:
                        { 'spark.embiq.com:443::::::::::::::::':
                           <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                       list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                 servername: 'spark.embiq.com',
                 singleUse: true } },
           _consuming: false,
           _dumped: false,
           req: [Circular],
           responseUrl: 'https://spark.embiq.com/api/config/tag_positions',
           redirects: [] },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        _redirectable:
         Writable {
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: true,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: true,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree:
               { next: null,
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: true,
           _events:
            [Object: null prototype] {
              response: [Function: handleResponse],
              error: [Function: handleRequestError] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _options:
            { maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: '/api/config/tag_positions',
              method: 'post',
              headers:
               { Accept: 'application/json, text/plain, */*',
                 'Content-Type': 'application/json;charset=utf-8',
                 'User-Agent': 'axios/0.18.0',
                 'Content-Length': 40 },
              agent: undefined,
              auth: undefined,
              hostname: 'spark.embiq.com',
              port: null,
              nativeProtocols:
               { 'http:':
                  { _connectionListener: [Function: connectionListener],
                    METHODS:
                     [ 'ACL',
                       'BIND',
                       'CHECKOUT',
                       'CONNECT',
                       'COPY',
                       'DELETE',
                       'GET',
                       'HEAD',
                       'LINK',
                       'LOCK',
                       'M-SEARCH',
                       'MERGE',
                       'MKACTIVITY',
                       'MKCALENDAR',
                       'MKCOL',
                       'MOVE',
                       'NOTIFY',
                       'OPTIONS',
                       'PATCH',
                       'POST',
                       'PROPFIND',
                       'PROPPATCH',
                       'PURGE',
                       'PUT',
                       'REBIND',
                       'REPORT',
                       'SEARCH',
                       'SOURCE',
                       'SUBSCRIBE',
                       'TRACE',
                       'UNBIND',
                       'UNLINK',
                       'UNLOCK',
                       'UNSUBSCRIBE' ],
                    STATUS_CODES:
                     { '100': 'Continue',
                       '101': 'Switching Protocols',
                       '102': 'Processing',
                       '103': 'Early Hints',
                       '200': 'OK',
                       '201': 'Created',
                       '202': 'Accepted',
                       '203': 'Non-Authoritative Information',
                       '204': 'No Content',
                       '205': 'Reset Content',
                       '206': 'Partial Content',
                       '207': 'Multi-Status',
                       '208': 'Already Reported',
                       '226': 'IM Used',
                       '300': 'Multiple Choices',
                       '301': 'Moved Permanently',
                       '302': 'Found',
                       '303': 'See Other',
                       '304': 'Not Modified',
                       '305': 'Use Proxy',
                       '307': 'Temporary Redirect',
                       '308': 'Permanent Redirect',
                       '400': 'Bad Request',
                       '401': 'Unauthorized',
                       '402': 'Payment Required',
                       '403': 'Forbidden',
                       '404': 'Not Found',
                       '405': 'Method Not Allowed',
                       '406': 'Not Acceptable',
                       '407': 'Proxy Authentication Required',
                       '408': 'Request Timeout',
                       '409': 'Conflict',
                       '410': 'Gone',
                       '411': 'Length Required',
                       '412': 'Precondition Failed',
                       '413': 'Payload Too Large',
                       '414': 'URI Too Long',
                       '415': 'Unsupported Media Type',
                       '416': 'Range Not Satisfiable',
                       '417': 'Expectation Failed',
                       '418': "I'm a Teapot",
                       '421': 'Misdirected Request',
                       '422': 'Unprocessable Entity',
                       '423': 'Locked',
                       '424': 'Failed Dependency',
                       '425': 'Unordered Collection',
                       '426': 'Upgrade Required',
                       '428': 'Precondition Required',
                       '429': 'Too Many Requests',
                       '431': 'Request Header Fields Too Large',
                       '451': 'Unavailable For Legal Reasons',
                       '500': 'Internal Server Error',
                       '501': 'Not Implemented',
                       '502': 'Bad Gateway',
                       '503': 'Service Unavailable',
                       '504': 'Gateway Timeout',
                       '505': 'HTTP Version Not Supported',
                       '506': 'Variant Also Negotiates',
                       '507': 'Insufficient Storage',
                       '508': 'Loop Detected',
                       '509': 'Bandwidth Limit Exceeded',
                       '510': 'Not Extended',
                       '511': 'Network Authentication Required' },
                    Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] },
                 'https:':
                  { Agent: [Function: Agent],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 443,
                       protocol: 'https:',
                       options: { path: null },
                       requests: {},
                       sockets:
                        { 'spark.embiq.com:443::::::::::::::::':
                           [ TLSSocket {
                               _tlsOptions:
                                { pipe: false,
                                  secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                                  isServer: false,
                                  requestCert: true,
                                  rejectUnauthorized: true,
                                  session: undefined,
                                  ALPNProtocols: undefined,
                                  requestOCSP: undefined },
                               _secureEstablished: true,
                               _securePending: false,
                               _newSessionPending: false,
                               _controlReleased: true,
                               _SNICallback: null,
                               servername: 'spark.embiq.com',
                               alpnProtocol: false,
                               authorized: true,
                               authorizationError: null,
                               encrypted: true,
                               _events:
                                [Object: null prototype] {
                                  close:
                                   [ [Function: onSocketCloseDestroySSL],
                                     { [Function: bound onceWrapper] listener: [Function] },
                                     [Function: onClose],
                                     [Function: socketCloseListener] ],
                                  end: [Function: onReadableStreamEnd],
                                  secure: [Function: onConnectSecure],
                                  free: [Function: onFree],
                                  agentRemove: [Function: onRemove],
                                  drain: [Function: ondrain],
                                  error: [Function: socketErrorListener],
                                  finish:
                                   { [Function: bound onceWrapper] listener: [Function: destroy] } },
                               _eventsCount: 8,
                               connecting: false,
                               _hadError: false,
                               _handle:
                                TLSWrap {
                                  _parent:
                                   TCP {
                                     reading: [Getter/Setter],
                                     onread: null,
                                     onconnection: null,
                                     [Symbol(owner)]: [Circular] },
                                  _parentWrap: undefined,
                                  _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                                  reading: true,
                                  onread: [Function: onStreamRead],
                                  onhandshakestart: [Function: noop],
                                  onhandshakedone: [Function: bound ],
                                  onocspresponse: [Function: onocspresponse],
                                  onerror: [Function: onerror],
                                  [Symbol(owner)]: [Circular] },
                               _parent: null,
                               _host: 'spark.embiq.com',
                               _readableState:
                                ReadableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  buffer: BufferList { head: null, tail: null, length: 0 },
                                  length: 0,
                                  pipes: null,
                                  pipesCount: 0,
                                  flowing: true,
                                  ended: false,
                                  endEmitted: false,
                                  reading: true,
                                  sync: false,
                                  needReadable: true,
                                  emittedReadable: false,
                                  readableListening: false,
                                  resumeScheduled: false,
                                  emitClose: false,
                                  autoDestroy: false,
                                  destroyed: false,
                                  defaultEncoding: 'utf8',
                                  awaitDrain: 0,
                                  readingMore: false,
                                  decoder: null,
                                  encoding: null },
                               readable: true,
                               _maxListeners: undefined,
                               _writableState:
                                WritableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  finalCalled: true,
                                  needDrain: false,
                                  ending: true,
                                  ended: true,
                                  finished: false,
                                  destroyed: false,
                                  decodeStrings: false,
                                  defaultEncoding: 'utf8',
                                  length: 0,
                                  writing: false,
                                  corked: 0,
                                  sync: false,
                                  bufferProcessing: false,
                                  onwrite: [Function: bound onwrite],
                                  writecb: null,
                                  writelen: 0,
                                  bufferedRequest: null,
                                  lastBufferedRequest: null,
                                  pendingcb: 1,
                                  prefinished: false,
                                  errorEmitted: false,
                                  emitClose: false,
                                  autoDestroy: false,
                                  bufferedRequestCount: 0,
                                  corkedRequestsFree:
                                   { next:
                                      { next: null,
                                        entry: null,
                                        finish: [Function: bound onCorkedFinish] },
                                     entry: null,
                                     finish: [Function: bound onCorkedFinish] } },
                               writable: false,
                               allowHalfOpen: false,
                               _sockname: null,
                               _pendingData: null,
                               _pendingEncoding: '',
                               server: undefined,
                               _server: null,
                               ssl:
                                TLSWrap {
                                  _parent:
                                   TCP {
                                     reading: [Getter/Setter],
                                     onread: null,
                                     onconnection: null,
                                     [Symbol(owner)]: [Circular] },
                                  _parentWrap: undefined,
                                  _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                                  reading: true,
                                  onread: [Function: onStreamRead],
                                  onhandshakestart: [Function: noop],
                                  onhandshakedone: [Function: bound ],
                                  onocspresponse: [Function: onocspresponse],
                                  onerror: [Function: onerror],
                                  [Symbol(owner)]: [Circular] },
                               _requestCert: true,
                               _rejectUnauthorized: true,
                               parser: null,
                               _httpMessage: [Circular],
                               [Symbol(res)]:
                                TLSWrap {
                                  _parent:
                                   TCP {
                                     reading: [Getter/Setter],
                                     onread: null,
                                     onconnection: null,
                                     [Symbol(owner)]: [Circular] },
                                  _parentWrap: undefined,
                                  _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                                  reading: true,
                                  onread: [Function: onStreamRead],
                                  onhandshakestart: [Function: noop],
                                  onhandshakedone: [Function: bound ],
                                  onocspresponse: [Function: onocspresponse],
                                  onerror: [Function: onerror],
                                  [Symbol(owner)]: [Circular] },
                               [Symbol(asyncId)]: 7,
                               [Symbol(lastWriteQueueSize)]: 0,
                               [Symbol(timeout)]: null,
                               [Symbol(kBytesRead)]: 0,
                               [Symbol(kBytesWritten)]: 0,
                               [Symbol(connect-options)]:
                                { rejectUnauthorized: true,
                                  ciphers:
                                   'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                                  checkServerIdentity: [Function: checkServerIdentity],
                                  minDHSize: 1024,
                                  encoding: null,
                                  _agentKey: 'spark.embiq.com:443::::::::::::::::',
                                  host: 'spark.embiq.com',
                                  pathname: '/api/config/tag_positions',
                                  nativeProtocols: [Circular],
                                  port: 443,
                                  hostname: 'spark.embiq.com',
                                  auth: undefined,
                                  agent: undefined,
                                  headers:
                                   { Accept: 'application/json, text/plain, */*',
                                     'Content-Type': 'application/json;charset=utf-8',
                                     'User-Agent': 'axios/0.18.0',
                                     'Content-Length': 40 },
                                  method: 'post',
                                  path: null,
                                  protocol: 'https:',
                                  maxBodyLength: 10485760,
                                  maxRedirects: 21,
                                  _defaultAgent: [Circular],
                                  servername: 'spark.embiq.com',
                                  singleUse: true } } ] },
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256,
                       maxCachedSessions: 100,
                       _sessionCache:
                        { map:
                           { 'spark.embiq.com:443::::::::::::::::':
                              <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                          list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] } },
              pathname: '/api/config/tag_positions' },
           _ended: true,
           _ending: true,
           _redirectCount: 0,
           _redirects: [],
           _requestBodyLength: 40,
           _requestBodyBuffers: [],
           _onNativeResponse: [Function],
           _currentRequest: [Circular],
           _currentUrl: 'https://spark.embiq.com/api/config/tag_positions' },
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]:
         [Object: null prototype] {
           accept: [ 'Accept', 'application/json, text/plain, */*' ],
           'content-type': [ 'Content-Type', 'application/json;charset=utf-8' ],
           'user-agent': [ 'User-Agent', 'axios/0.18.0' ],
           'content-length': [ 'Content-Length', 40 ],
           host: [ 'Host', 'spark.embiq.com' ] } },
     data: '<h1>Server Error (500)</h1>' } }
{ Error: Request failed with status code 500
    at createError (/home/embiq/Projects/fake-bwm/node_modules/axios/lib/core/createError.js:16:15)
    at settle (/home/embiq/Projects/fake-bwm/node_modules/axios/lib/core/settle.js:18:12)
    at IncomingMessage.handleStreamEnd (/home/embiq/Projects/fake-bwm/node_modules/axios/lib/adapters/http.js:201:11)
    at IncomingMessage.emit (events.js:187:15)
    at endReadableNT (_stream_readable.js:1098:12)
    at process.internalTickCallback (internal/process/next_tick.js:72:19)
  config:
   { adapter: [Function: httpAdapter],
     transformRequest: { '0': [Function: transformRequest] },
     transformResponse: { '0': [Function: transformResponse] },
     timeout: 0,
     xsrfCookieName: 'XSRF-TOKEN',
     xsrfHeaderName: 'X-XSRF-TOKEN',
     maxContentLength: -1,
     validateStatus: [Function: validateStatus],
     headers:
      { Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json;charset=utf-8',
        'User-Agent': 'axios/0.18.0',
        'Content-Length': 40 },
     method: 'post',
     url: 'https://spark.embiq.com/api/config/tag_positions',
     data: '{"devaddr":"TAG1","data":"00D800120000"}' },
  request:
   ClientRequest {
     _events:
      [Object: null prototype] {
        socket: [Function],
        abort: [Function],
        aborted: [Function],
        error: [Function],
        timeout: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 6,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      TLSSocket {
        _tlsOptions:
         { pipe: false,
           secureContext: SecureContext { context: SecureContext {}, singleUse: true },
           isServer: false,
           requestCert: true,
           rejectUnauthorized: true,
           session:
            <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
           ALPNProtocols: undefined,
           requestOCSP: undefined },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'spark.embiq.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events:
         [Object: null prototype] {
           close:
            [ [Function: onSocketCloseDestroySSL],
              { [Function: bound onceWrapper] listener: [Function] },
              [Function: onClose],
              [Function: socketCloseListener] ],
           end: [Function: onReadableStreamEnd],
           secure: [Function: onConnectSecure],
           free: [Function: onFree],
           agentRemove: [Function: onRemove],
           drain: [Function: ondrain],
           error: [Function: socketErrorListener],
           finish:
            { [Function: bound onceWrapper] listener: [Function: destroy] } },
        _eventsCount: 8,
        connecting: false,
        _hadError: false,
        _handle:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              onread: null,
              onconnection: null,
              [Symbol(owner)]: [Circular] },
           _parentWrap: undefined,
           _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
           reading: true,
           onread: [Function: onStreamRead],
           onhandshakestart: [Function: noop],
           onhandshakedone: [Function: bound ],
           onocspresponse: [Function: onocspresponse],
           onerror: [Function: onerror],
           [Symbol(owner)]: [Circular] },
        _parent: null,
        _host: 'spark.embiq.com',
        _readableState:
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           emitClose: false,
           autoDestroy: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        _maxListeners: undefined,
        _writableState:
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: true,
           needDrain: false,
           ending: true,
           ended: true,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: false,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 1,
           prefinished: false,
           errorEmitted: false,
           emitClose: false,
           autoDestroy: false,
           bufferedRequestCount: 0,
           corkedRequestsFree:
            { next:
               { next: null,
                 entry: null,
                 finish: [Function: bound onCorkedFinish] },
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              onread: null,
              onconnection: null,
              [Symbol(owner)]: [Circular] },
           _parentWrap: undefined,
           _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
           reading: true,
           onread: [Function: onStreamRead],
           onhandshakestart: [Function: noop],
           onhandshakedone: [Function: bound ],
           onocspresponse: [Function: onocspresponse],
           onerror: [Function: onerror],
           [Symbol(owner)]: [Circular] },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular],
        [Symbol(res)]:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              onread: null,
              onconnection: null,
              [Symbol(owner)]: [Circular] },
           _parentWrap: undefined,
           _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
           reading: true,
           onread: [Function: onStreamRead],
           onhandshakestart: [Function: noop],
           onhandshakedone: [Function: bound ],
           onocspresponse: [Function: onocspresponse],
           onerror: [Function: onerror],
           [Symbol(owner)]: [Circular] },
        [Symbol(asyncId)]: 31,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]:
         { rejectUnauthorized: true,
           ciphers:
            'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
           checkServerIdentity: [Function: checkServerIdentity],
           minDHSize: 1024,
           servername: 'spark.embiq.com',
           _defaultAgent:
            Agent {
              _events: [Object: null prototype] { free: [Function] },
              _eventsCount: 1,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: { path: null },
              requests: {},
              sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
              freeSockets: {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              maxCachedSessions: 100,
              _sessionCache:
               { map:
                  { 'spark.embiq.com:443::::::::::::::::':
                     <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                 list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
           maxRedirects: 21,
           maxBodyLength: 10485760,
           protocol: 'https:',
           path: null,
           method: 'post',
           headers:
            { Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json;charset=utf-8',
              'User-Agent': 'axios/0.18.0',
              'Content-Length': 40 },
           agent: undefined,
           auth: undefined,
           hostname: 'spark.embiq.com',
           port: 443,
           nativeProtocols:
            { 'http:':
               { _connectionListener: [Function: connectionListener],
                 METHODS:
                  [ 'ACL',
                    'BIND',
                    'CHECKOUT',
                    'CONNECT',
                    'COPY',
                    'DELETE',
                    'GET',
                    'HEAD',
                    'LINK',
                    'LOCK',
                    'M-SEARCH',
                    'MERGE',
                    'MKACTIVITY',
                    'MKCALENDAR',
                    'MKCOL',
                    'MOVE',
                    'NOTIFY',
                    'OPTIONS',
                    'PATCH',
                    'POST',
                    'PROPFIND',
                    'PROPPATCH',
                    'PURGE',
                    'PUT',
                    'REBIND',
                    'REPORT',
                    'SEARCH',
                    'SOURCE',
                    'SUBSCRIBE',
                    'TRACE',
                    'UNBIND',
                    'UNLINK',
                    'UNLOCK',
                    'UNSUBSCRIBE' ],
                 STATUS_CODES:
                  { '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Unordered Collection',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required' },
                 Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                 ClientRequest: [Function: ClientRequest],
                 globalAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 80,
                    protocol: 'http:',
                    options: { path: null },
                    requests: {},
                    sockets: {},
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256 },
                 IncomingMessage: [Function: IncomingMessage],
                 OutgoingMessage: [Function: OutgoingMessage],
                 Server: [Function: Server],
                 ServerResponse: [Function: ServerResponse],
                 createServer: [Function: createServer],
                 get: [Function: get],
                 request: [Function: request] },
              'https:':
               { Agent: [Function: Agent],
                 globalAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: { path: null },
                    requests: {},
                    sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    maxCachedSessions: 100,
                    _sessionCache:
                     { map:
                        { 'spark.embiq.com:443::::::::::::::::':
                           <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                       list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                 Server: [Function: Server],
                 createServer: [Function: createServer],
                 get: [Function: get],
                 request: [Function: request] } },
           pathname: '/api/config/tag_positions',
           host: 'spark.embiq.com',
           _agentKey: 'spark.embiq.com:443::::::::::::::::',
           encoding: null,
           session:
            <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
           singleUse: true } },
     connection:
      TLSSocket {
        _tlsOptions:
         { pipe: false,
           secureContext: SecureContext { context: SecureContext {}, singleUse: true },
           isServer: false,
           requestCert: true,
           rejectUnauthorized: true,
           session:
            <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
           ALPNProtocols: undefined,
           requestOCSP: undefined },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'spark.embiq.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events:
         [Object: null prototype] {
           close:
            [ [Function: onSocketCloseDestroySSL],
              { [Function: bound onceWrapper] listener: [Function] },
              [Function: onClose],
              [Function: socketCloseListener] ],
           end: [Function: onReadableStreamEnd],
           secure: [Function: onConnectSecure],
           free: [Function: onFree],
           agentRemove: [Function: onRemove],
           drain: [Function: ondrain],
           error: [Function: socketErrorListener],
           finish:
            { [Function: bound onceWrapper] listener: [Function: destroy] } },
        _eventsCount: 8,
        connecting: false,
        _hadError: false,
        _handle:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              onread: null,
              onconnection: null,
              [Symbol(owner)]: [Circular] },
           _parentWrap: undefined,
           _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
           reading: true,
           onread: [Function: onStreamRead],
           onhandshakestart: [Function: noop],
           onhandshakedone: [Function: bound ],
           onocspresponse: [Function: onocspresponse],
           onerror: [Function: onerror],
           [Symbol(owner)]: [Circular] },
        _parent: null,
        _host: 'spark.embiq.com',
        _readableState:
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           emitClose: false,
           autoDestroy: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        _maxListeners: undefined,
        _writableState:
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: true,
           needDrain: false,
           ending: true,
           ended: true,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: false,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 1,
           prefinished: false,
           errorEmitted: false,
           emitClose: false,
           autoDestroy: false,
           bufferedRequestCount: 0,
           corkedRequestsFree:
            { next:
               { next: null,
                 entry: null,
                 finish: [Function: bound onCorkedFinish] },
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              onread: null,
              onconnection: null,
              [Symbol(owner)]: [Circular] },
           _parentWrap: undefined,
           _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
           reading: true,
           onread: [Function: onStreamRead],
           onhandshakestart: [Function: noop],
           onhandshakedone: [Function: bound ],
           onocspresponse: [Function: onocspresponse],
           onerror: [Function: onerror],
           [Symbol(owner)]: [Circular] },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular],
        [Symbol(res)]:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              onread: null,
              onconnection: null,
              [Symbol(owner)]: [Circular] },
           _parentWrap: undefined,
           _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
           reading: true,
           onread: [Function: onStreamRead],
           onhandshakestart: [Function: noop],
           onhandshakedone: [Function: bound ],
           onocspresponse: [Function: onocspresponse],
           onerror: [Function: onerror],
           [Symbol(owner)]: [Circular] },
        [Symbol(asyncId)]: 31,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]:
         { rejectUnauthorized: true,
           ciphers:
            'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
           checkServerIdentity: [Function: checkServerIdentity],
           minDHSize: 1024,
           servername: 'spark.embiq.com',
           _defaultAgent:
            Agent {
              _events: [Object: null prototype] { free: [Function] },
              _eventsCount: 1,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: { path: null },
              requests: {},
              sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
              freeSockets: {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              maxCachedSessions: 100,
              _sessionCache:
               { map:
                  { 'spark.embiq.com:443::::::::::::::::':
                     <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                 list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
           maxRedirects: 21,
           maxBodyLength: 10485760,
           protocol: 'https:',
           path: null,
           method: 'post',
           headers:
            { Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json;charset=utf-8',
              'User-Agent': 'axios/0.18.0',
              'Content-Length': 40 },
           agent: undefined,
           auth: undefined,
           hostname: 'spark.embiq.com',
           port: 443,
           nativeProtocols:
            { 'http:':
               { _connectionListener: [Function: connectionListener],
                 METHODS:
                  [ 'ACL',
                    'BIND',
                    'CHECKOUT',
                    'CONNECT',
                    'COPY',
                    'DELETE',
                    'GET',
                    'HEAD',
                    'LINK',
                    'LOCK',
                    'M-SEARCH',
                    'MERGE',
                    'MKACTIVITY',
                    'MKCALENDAR',
                    'MKCOL',
                    'MOVE',
                    'NOTIFY',
                    'OPTIONS',
                    'PATCH',
                    'POST',
                    'PROPFIND',
                    'PROPPATCH',
                    'PURGE',
                    'PUT',
                    'REBIND',
                    'REPORT',
                    'SEARCH',
                    'SOURCE',
                    'SUBSCRIBE',
                    'TRACE',
                    'UNBIND',
                    'UNLINK',
                    'UNLOCK',
                    'UNSUBSCRIBE' ],
                 STATUS_CODES:
                  { '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Unordered Collection',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required' },
                 Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                 ClientRequest: [Function: ClientRequest],
                 globalAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 80,
                    protocol: 'http:',
                    options: { path: null },
                    requests: {},
                    sockets: {},
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256 },
                 IncomingMessage: [Function: IncomingMessage],
                 OutgoingMessage: [Function: OutgoingMessage],
                 Server: [Function: Server],
                 ServerResponse: [Function: ServerResponse],
                 createServer: [Function: createServer],
                 get: [Function: get],
                 request: [Function: request] },
              'https:':
               { Agent: [Function: Agent],
                 globalAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: { path: null },
                    requests: {},
                    sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    maxCachedSessions: 100,
                    _sessionCache:
                     { map:
                        { 'spark.embiq.com:443::::::::::::::::':
                           <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                       list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                 Server: [Function: Server],
                 createServer: [Function: createServer],
                 get: [Function: get],
                 request: [Function: request] } },
           pathname: '/api/config/tag_positions',
           host: 'spark.embiq.com',
           _agentKey: 'spark.embiq.com:443::::::::::::::::',
           encoding: null,
           session:
            <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
           singleUse: true } },
     _header:
      'POST /api/config/tag_positions HTTP/1.1\r\nAccept: application/json, text/plain, */*\r\nContent-Type: application/json;charset=utf-8\r\nUser-Agent: axios/0.18.0\r\nContent-Length: 40\r\nHost: spark.embiq.com\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object: null prototype] { free: [Function] },
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: { path: null },
        requests: {},
        sockets:
         { 'spark.embiq.com:443::::::::::::::::':
            [ TLSSocket {
                _tlsOptions:
                 { pipe: false,
                   secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                   isServer: false,
                   requestCert: true,
                   rejectUnauthorized: true,
                   session:
                    <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
                   ALPNProtocols: undefined,
                   requestOCSP: undefined },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                _SNICallback: null,
                servername: 'spark.embiq.com',
                alpnProtocol: false,
                authorized: true,
                authorizationError: null,
                encrypted: true,
                _events:
                 [Object: null prototype] {
                   close:
                    [ [Function: onSocketCloseDestroySSL],
                      { [Function: bound onceWrapper] listener: [Function] },
                      [Function: onClose],
                      [Function: socketCloseListener] ],
                   end: [Function: onReadableStreamEnd],
                   secure: [Function: onConnectSecure],
                   free: [Function: onFree],
                   agentRemove: [Function: onRemove],
                   drain: [Function: ondrain],
                   error: [Function: socketErrorListener],
                   finish:
                    { [Function: bound onceWrapper] listener: [Function: destroy] } },
                _eventsCount: 8,
                connecting: false,
                _hadError: false,
                _handle:
                 TLSWrap {
                   _parent:
                    TCP {
                      reading: [Getter/Setter],
                      onread: null,
                      onconnection: null,
                      [Symbol(owner)]: [Circular] },
                   _parentWrap: undefined,
                   _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                   reading: true,
                   onread: [Function: onStreamRead],
                   onhandshakestart: [Function: noop],
                   onhandshakedone: [Function: bound ],
                   onocspresponse: [Function: onocspresponse],
                   onerror: [Function: onerror],
                   [Symbol(owner)]: [Circular] },
                _parent: null,
                _host: 'spark.embiq.com',
                _readableState:
                 ReadableState {
                   objectMode: false,
                   highWaterMark: 16384,
                   buffer: BufferList { head: null, tail: null, length: 0 },
                   length: 0,
                   pipes: null,
                   pipesCount: 0,
                   flowing: true,
                   ended: false,
                   endEmitted: false,
                   reading: true,
                   sync: false,
                   needReadable: true,
                   emittedReadable: false,
                   readableListening: false,
                   resumeScheduled: false,
                   emitClose: false,
                   autoDestroy: false,
                   destroyed: false,
                   defaultEncoding: 'utf8',
                   awaitDrain: 0,
                   readingMore: false,
                   decoder: null,
                   encoding: null },
                readable: true,
                _maxListeners: undefined,
                _writableState:
                 WritableState {
                   objectMode: false,
                   highWaterMark: 16384,
                   finalCalled: true,
                   needDrain: false,
                   ending: true,
                   ended: true,
                   finished: false,
                   destroyed: false,
                   decodeStrings: false,
                   defaultEncoding: 'utf8',
                   length: 0,
                   writing: false,
                   corked: 0,
                   sync: false,
                   bufferProcessing: false,
                   onwrite: [Function: bound onwrite],
                   writecb: null,
                   writelen: 0,
                   bufferedRequest: null,
                   lastBufferedRequest: null,
                   pendingcb: 1,
                   prefinished: false,
                   errorEmitted: false,
                   emitClose: false,
                   autoDestroy: false,
                   bufferedRequestCount: 0,
                   corkedRequestsFree:
                    { next:
                       { next: null,
                         entry: null,
                         finish: [Function: bound onCorkedFinish] },
                      entry: null,
                      finish: [Function: bound onCorkedFinish] } },
                writable: false,
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl:
                 TLSWrap {
                   _parent:
                    TCP {
                      reading: [Getter/Setter],
                      onread: null,
                      onconnection: null,
                      [Symbol(owner)]: [Circular] },
                   _parentWrap: undefined,
                   _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                   reading: true,
                   onread: [Function: onStreamRead],
                   onhandshakestart: [Function: noop],
                   onhandshakedone: [Function: bound ],
                   onocspresponse: [Function: onocspresponse],
                   onerror: [Function: onerror],
                   [Symbol(owner)]: [Circular] },
                _requestCert: true,
                _rejectUnauthorized: true,
                parser: null,
                _httpMessage: [Circular],
                [Symbol(res)]:
                 TLSWrap {
                   _parent:
                    TCP {
                      reading: [Getter/Setter],
                      onread: null,
                      onconnection: null,
                      [Symbol(owner)]: [Circular] },
                   _parentWrap: undefined,
                   _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                   reading: true,
                   onread: [Function: onStreamRead],
                   onhandshakestart: [Function: noop],
                   onhandshakedone: [Function: bound ],
                   onocspresponse: [Function: onocspresponse],
                   onerror: [Function: onerror],
                   [Symbol(owner)]: [Circular] },
                [Symbol(asyncId)]: 31,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(connect-options)]:
                 { rejectUnauthorized: true,
                   ciphers:
                    'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                   checkServerIdentity: [Function: checkServerIdentity],
                   minDHSize: 1024,
                   servername: 'spark.embiq.com',
                   _defaultAgent: [Circular],
                   maxRedirects: 21,
                   maxBodyLength: 10485760,
                   protocol: 'https:',
                   path: null,
                   method: 'post',
                   headers:
                    { Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json;charset=utf-8',
                      'User-Agent': 'axios/0.18.0',
                      'Content-Length': 40 },
                   agent: undefined,
                   auth: undefined,
                   hostname: 'spark.embiq.com',
                   port: 443,
                   nativeProtocols:
                    { 'http:':
                       { _connectionListener: [Function: connectionListener],
                         METHODS:
                          [ 'ACL',
                            'BIND',
                            'CHECKOUT',
                            'CONNECT',
                            'COPY',
                            'DELETE',
                            'GET',
                            'HEAD',
                            'LINK',
                            'LOCK',
                            'M-SEARCH',
                            'MERGE',
                            'MKACTIVITY',
                            'MKCALENDAR',
                            'MKCOL',
                            'MOVE',
                            'NOTIFY',
                            'OPTIONS',
                            'PATCH',
                            'POST',
                            'PROPFIND',
                            'PROPPATCH',
                            'PURGE',
                            'PUT',
                            'REBIND',
                            'REPORT',
                            'SEARCH',
                            'SOURCE',
                            'SUBSCRIBE',
                            'TRACE',
                            'UNBIND',
                            'UNLINK',
                            'UNLOCK',
                            'UNSUBSCRIBE' ],
                         STATUS_CODES:
                          { '100': 'Continue',
                            '101': 'Switching Protocols',
                            '102': 'Processing',
                            '103': 'Early Hints',
                            '200': 'OK',
                            '201': 'Created',
                            '202': 'Accepted',
                            '203': 'Non-Authoritative Information',
                            '204': 'No Content',
                            '205': 'Reset Content',
                            '206': 'Partial Content',
                            '207': 'Multi-Status',
                            '208': 'Already Reported',
                            '226': 'IM Used',
                            '300': 'Multiple Choices',
                            '301': 'Moved Permanently',
                            '302': 'Found',
                            '303': 'See Other',
                            '304': 'Not Modified',
                            '305': 'Use Proxy',
                            '307': 'Temporary Redirect',
                            '308': 'Permanent Redirect',
                            '400': 'Bad Request',
                            '401': 'Unauthorized',
                            '402': 'Payment Required',
                            '403': 'Forbidden',
                            '404': 'Not Found',
                            '405': 'Method Not Allowed',
                            '406': 'Not Acceptable',
                            '407': 'Proxy Authentication Required',
                            '408': 'Request Timeout',
                            '409': 'Conflict',
                            '410': 'Gone',
                            '411': 'Length Required',
                            '412': 'Precondition Failed',
                            '413': 'Payload Too Large',
                            '414': 'URI Too Long',
                            '415': 'Unsupported Media Type',
                            '416': 'Range Not Satisfiable',
                            '417': 'Expectation Failed',
                            '418': "I'm a Teapot",
                            '421': 'Misdirected Request',
                            '422': 'Unprocessable Entity',
                            '423': 'Locked',
                            '424': 'Failed Dependency',
                            '425': 'Unordered Collection',
                            '426': 'Upgrade Required',
                            '428': 'Precondition Required',
                            '429': 'Too Many Requests',
                            '431': 'Request Header Fields Too Large',
                            '451': 'Unavailable For Legal Reasons',
                            '500': 'Internal Server Error',
                            '501': 'Not Implemented',
                            '502': 'Bad Gateway',
                            '503': 'Service Unavailable',
                            '504': 'Gateway Timeout',
                            '505': 'HTTP Version Not Supported',
                            '506': 'Variant Also Negotiates',
                            '507': 'Insufficient Storage',
                            '508': 'Loop Detected',
                            '509': 'Bandwidth Limit Exceeded',
                            '510': 'Not Extended',
                            '511': 'Network Authentication Required' },
                         Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                         ClientRequest: [Function: ClientRequest],
                         globalAgent:
                          Agent {
                            _events: [Object: null prototype] { free: [Function] },
                            _eventsCount: 1,
                            _maxListeners: undefined,
                            defaultPort: 80,
                            protocol: 'http:',
                            options: { path: null },
                            requests: {},
                            sockets: {},
                            freeSockets: {},
                            keepAliveMsecs: 1000,
                            keepAlive: false,
                            maxSockets: Infinity,
                            maxFreeSockets: 256 },
                         IncomingMessage: [Function: IncomingMessage],
                         OutgoingMessage: [Function: OutgoingMessage],
                         Server: [Function: Server],
                         ServerResponse: [Function: ServerResponse],
                         createServer: [Function: createServer],
                         get: [Function: get],
                         request: [Function: request] },
                      'https:':
                       { Agent: [Function: Agent],
                         globalAgent: [Circular],
                         Server: [Function: Server],
                         createServer: [Function: createServer],
                         get: [Function: get],
                         request: [Function: request] } },
                   pathname: '/api/config/tag_positions',
                   host: 'spark.embiq.com',
                   _agentKey: 'spark.embiq.com:443::::::::::::::::',
                   encoding: null,
                   session:
                    <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
                   singleUse: true } } ] },
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        maxCachedSessions: 100,
        _sessionCache:
         { map:
            { 'spark.embiq.com:443::::::::::::::::':
               <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
           list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/api/config/tag_positions',
     _ended: true,
     res:
      IncomingMessage {
        _readableState:
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: true,
           endEmitted: true,
           reading: false,
           sync: true,
           needReadable: false,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           emitClose: true,
           autoDestroy: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: true,
           decoder: null,
           encoding: null },
        readable: false,
        _events:
         [Object: null prototype] {
           end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
           data: [Function: handleStreamData],
           error: [Function: handleStreamError] },
        _eventsCount: 3,
        _maxListeners: undefined,
        socket:
         TLSSocket {
           _tlsOptions:
            { pipe: false,
              secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session:
               <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined },
           _secureEstablished: true,
           _securePending: false,
           _newSessionPending: false,
           _controlReleased: true,
           _SNICallback: null,
           servername: 'spark.embiq.com',
           alpnProtocol: false,
           authorized: true,
           authorizationError: null,
           encrypted: true,
           _events:
            [Object: null prototype] {
              close:
               [ [Function: onSocketCloseDestroySSL],
                 { [Function: bound onceWrapper] listener: [Function] },
                 [Function: onClose],
                 [Function: socketCloseListener] ],
              end: [Function: onReadableStreamEnd],
              secure: [Function: onConnectSecure],
              free: [Function: onFree],
              agentRemove: [Function: onRemove],
              drain: [Function: ondrain],
              error: [Function: socketErrorListener],
              finish:
               { [Function: bound onceWrapper] listener: [Function: destroy] } },
           _eventsCount: 8,
           connecting: false,
           _hadError: false,
           _handle:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _parent: null,
           _host: 'spark.embiq.com',
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree:
               { next:
                  { next: null,
                    entry: null,
                    finish: [Function: bound onCorkedFinish] },
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: false,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: undefined,
           _server: null,
           ssl:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _requestCert: true,
           _rejectUnauthorized: true,
           parser: null,
           _httpMessage: [Circular],
           [Symbol(res)]:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           [Symbol(asyncId)]: 31,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0,
           [Symbol(connect-options)]:
            { rejectUnauthorized: true,
              ciphers:
               'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              servername: 'spark.embiq.com',
              _defaultAgent:
               Agent {
                 _events: [Object: null prototype] { free: [Function] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 defaultPort: 443,
                 protocol: 'https:',
                 options: { path: null },
                 requests: {},
                 sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                 freeSockets: {},
                 keepAliveMsecs: 1000,
                 keepAlive: false,
                 maxSockets: Infinity,
                 maxFreeSockets: 256,
                 maxCachedSessions: 100,
                 _sessionCache:
                  { map:
                     { 'spark.embiq.com:443::::::::::::::::':
                        <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                    list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
              maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: null,
              method: 'post',
              headers:
               { Accept: 'application/json, text/plain, */*',
                 'Content-Type': 'application/json;charset=utf-8',
                 'User-Agent': 'axios/0.18.0',
                 'Content-Length': 40 },
              agent: undefined,
              auth: undefined,
              hostname: 'spark.embiq.com',
              port: 443,
              nativeProtocols:
               { 'http:':
                  { _connectionListener: [Function: connectionListener],
                    METHODS:
                     [ 'ACL',
                       'BIND',
                       'CHECKOUT',
                       'CONNECT',
                       'COPY',
                       'DELETE',
                       'GET',
                       'HEAD',
                       'LINK',
                       'LOCK',
                       'M-SEARCH',
                       'MERGE',
                       'MKACTIVITY',
                       'MKCALENDAR',
                       'MKCOL',
                       'MOVE',
                       'NOTIFY',
                       'OPTIONS',
                       'PATCH',
                       'POST',
                       'PROPFIND',
                       'PROPPATCH',
                       'PURGE',
                       'PUT',
                       'REBIND',
                       'REPORT',
                       'SEARCH',
                       'SOURCE',
                       'SUBSCRIBE',
                       'TRACE',
                       'UNBIND',
                       'UNLINK',
                       'UNLOCK',
                       'UNSUBSCRIBE' ],
                    STATUS_CODES:
                     { '100': 'Continue',
                       '101': 'Switching Protocols',
                       '102': 'Processing',
                       '103': 'Early Hints',
                       '200': 'OK',
                       '201': 'Created',
                       '202': 'Accepted',
                       '203': 'Non-Authoritative Information',
                       '204': 'No Content',
                       '205': 'Reset Content',
                       '206': 'Partial Content',
                       '207': 'Multi-Status',
                       '208': 'Already Reported',
                       '226': 'IM Used',
                       '300': 'Multiple Choices',
                       '301': 'Moved Permanently',
                       '302': 'Found',
                       '303': 'See Other',
                       '304': 'Not Modified',
                       '305': 'Use Proxy',
                       '307': 'Temporary Redirect',
                       '308': 'Permanent Redirect',
                       '400': 'Bad Request',
                       '401': 'Unauthorized',
                       '402': 'Payment Required',
                       '403': 'Forbidden',
                       '404': 'Not Found',
                       '405': 'Method Not Allowed',
                       '406': 'Not Acceptable',
                       '407': 'Proxy Authentication Required',
                       '408': 'Request Timeout',
                       '409': 'Conflict',
                       '410': 'Gone',
                       '411': 'Length Required',
                       '412': 'Precondition Failed',
                       '413': 'Payload Too Large',
                       '414': 'URI Too Long',
                       '415': 'Unsupported Media Type',
                       '416': 'Range Not Satisfiable',
                       '417': 'Expectation Failed',
                       '418': "I'm a Teapot",
                       '421': 'Misdirected Request',
                       '422': 'Unprocessable Entity',
                       '423': 'Locked',
                       '424': 'Failed Dependency',
                       '425': 'Unordered Collection',
                       '426': 'Upgrade Required',
                       '428': 'Precondition Required',
                       '429': 'Too Many Requests',
                       '431': 'Request Header Fields Too Large',
                       '451': 'Unavailable For Legal Reasons',
                       '500': 'Internal Server Error',
                       '501': 'Not Implemented',
                       '502': 'Bad Gateway',
                       '503': 'Service Unavailable',
                       '504': 'Gateway Timeout',
                       '505': 'HTTP Version Not Supported',
                       '506': 'Variant Also Negotiates',
                       '507': 'Insufficient Storage',
                       '508': 'Loop Detected',
                       '509': 'Bandwidth Limit Exceeded',
                       '510': 'Not Extended',
                       '511': 'Network Authentication Required' },
                    Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] },
                 'https:':
                  { Agent: [Function: Agent],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 443,
                       protocol: 'https:',
                       options: { path: null },
                       requests: {},
                       sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256,
                       maxCachedSessions: 100,
                       _sessionCache:
                        { map:
                           { 'spark.embiq.com:443::::::::::::::::':
                              <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                          list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] } },
              pathname: '/api/config/tag_positions',
              host: 'spark.embiq.com',
              _agentKey: 'spark.embiq.com:443::::::::::::::::',
              encoding: null,
              session:
               <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
              singleUse: true } },
        connection:
         TLSSocket {
           _tlsOptions:
            { pipe: false,
              secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session:
               <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined },
           _secureEstablished: true,
           _securePending: false,
           _newSessionPending: false,
           _controlReleased: true,
           _SNICallback: null,
           servername: 'spark.embiq.com',
           alpnProtocol: false,
           authorized: true,
           authorizationError: null,
           encrypted: true,
           _events:
            [Object: null prototype] {
              close:
               [ [Function: onSocketCloseDestroySSL],
                 { [Function: bound onceWrapper] listener: [Function] },
                 [Function: onClose],
                 [Function: socketCloseListener] ],
              end: [Function: onReadableStreamEnd],
              secure: [Function: onConnectSecure],
              free: [Function: onFree],
              agentRemove: [Function: onRemove],
              drain: [Function: ondrain],
              error: [Function: socketErrorListener],
              finish:
               { [Function: bound onceWrapper] listener: [Function: destroy] } },
           _eventsCount: 8,
           connecting: false,
           _hadError: false,
           _handle:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _parent: null,
           _host: 'spark.embiq.com',
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree:
               { next:
                  { next: null,
                    entry: null,
                    finish: [Function: bound onCorkedFinish] },
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: false,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: undefined,
           _server: null,
           ssl:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _requestCert: true,
           _rejectUnauthorized: true,
           parser: null,
           _httpMessage: [Circular],
           [Symbol(res)]:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           [Symbol(asyncId)]: 31,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0,
           [Symbol(connect-options)]:
            { rejectUnauthorized: true,
              ciphers:
               'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              servername: 'spark.embiq.com',
              _defaultAgent:
               Agent {
                 _events: [Object: null prototype] { free: [Function] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 defaultPort: 443,
                 protocol: 'https:',
                 options: { path: null },
                 requests: {},
                 sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                 freeSockets: {},
                 keepAliveMsecs: 1000,
                 keepAlive: false,
                 maxSockets: Infinity,
                 maxFreeSockets: 256,
                 maxCachedSessions: 100,
                 _sessionCache:
                  { map:
                     { 'spark.embiq.com:443::::::::::::::::':
                        <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                    list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
              maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: null,
              method: 'post',
              headers:
               { Accept: 'application/json, text/plain, */*',
                 'Content-Type': 'application/json;charset=utf-8',
                 'User-Agent': 'axios/0.18.0',
                 'Content-Length': 40 },
              agent: undefined,
              auth: undefined,
              hostname: 'spark.embiq.com',
              port: 443,
              nativeProtocols:
               { 'http:':
                  { _connectionListener: [Function: connectionListener],
                    METHODS:
                     [ 'ACL',
                       'BIND',
                       'CHECKOUT',
                       'CONNECT',
                       'COPY',
                       'DELETE',
                       'GET',
                       'HEAD',
                       'LINK',
                       'LOCK',
                       'M-SEARCH',
                       'MERGE',
                       'MKACTIVITY',
                       'MKCALENDAR',
                       'MKCOL',
                       'MOVE',
                       'NOTIFY',
                       'OPTIONS',
                       'PATCH',
                       'POST',
                       'PROPFIND',
                       'PROPPATCH',
                       'PURGE',
                       'PUT',
                       'REBIND',
                       'REPORT',
                       'SEARCH',
                       'SOURCE',
                       'SUBSCRIBE',
                       'TRACE',
                       'UNBIND',
                       'UNLINK',
                       'UNLOCK',
                       'UNSUBSCRIBE' ],
                    STATUS_CODES:
                     { '100': 'Continue',
                       '101': 'Switching Protocols',
                       '102': 'Processing',
                       '103': 'Early Hints',
                       '200': 'OK',
                       '201': 'Created',
                       '202': 'Accepted',
                       '203': 'Non-Authoritative Information',
                       '204': 'No Content',
                       '205': 'Reset Content',
                       '206': 'Partial Content',
                       '207': 'Multi-Status',
                       '208': 'Already Reported',
                       '226': 'IM Used',
                       '300': 'Multiple Choices',
                       '301': 'Moved Permanently',
                       '302': 'Found',
                       '303': 'See Other',
                       '304': 'Not Modified',
                       '305': 'Use Proxy',
                       '307': 'Temporary Redirect',
                       '308': 'Permanent Redirect',
                       '400': 'Bad Request',
                       '401': 'Unauthorized',
                       '402': 'Payment Required',
                       '403': 'Forbidden',
                       '404': 'Not Found',
                       '405': 'Method Not Allowed',
                       '406': 'Not Acceptable',
                       '407': 'Proxy Authentication Required',
                       '408': 'Request Timeout',
                       '409': 'Conflict',
                       '410': 'Gone',
                       '411': 'Length Required',
                       '412': 'Precondition Failed',
                       '413': 'Payload Too Large',
                       '414': 'URI Too Long',
                       '415': 'Unsupported Media Type',
                       '416': 'Range Not Satisfiable',
                       '417': 'Expectation Failed',
                       '418': "I'm a Teapot",
                       '421': 'Misdirected Request',
                       '422': 'Unprocessable Entity',
                       '423': 'Locked',
                       '424': 'Failed Dependency',
                       '425': 'Unordered Collection',
                       '426': 'Upgrade Required',
                       '428': 'Precondition Required',
                       '429': 'Too Many Requests',
                       '431': 'Request Header Fields Too Large',
                       '451': 'Unavailable For Legal Reasons',
                       '500': 'Internal Server Error',
                       '501': 'Not Implemented',
                       '502': 'Bad Gateway',
                       '503': 'Service Unavailable',
                       '504': 'Gateway Timeout',
                       '505': 'HTTP Version Not Supported',
                       '506': 'Variant Also Negotiates',
                       '507': 'Insufficient Storage',
                       '508': 'Loop Detected',
                       '509': 'Bandwidth Limit Exceeded',
                       '510': 'Not Extended',
                       '511': 'Network Authentication Required' },
                    Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] },
                 'https:':
                  { Agent: [Function: Agent],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 443,
                       protocol: 'https:',
                       options: { path: null },
                       requests: {},
                       sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256,
                       maxCachedSessions: 100,
                       _sessionCache:
                        { map:
                           { 'spark.embiq.com:443::::::::::::::::':
                              <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                          list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] } },
              pathname: '/api/config/tag_positions',
              host: 'spark.embiq.com',
              _agentKey: 'spark.embiq.com:443::::::::::::::::',
              encoding: null,
              session:
               <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
              singleUse: true } },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers:
         { server: 'nginx',
           date: 'Tue, 19 Feb 2019 09:53:02 GMT',
           'content-type': 'text/html',
           'content-length': '27',
           connection: 'close',
           'x-frame-options': 'SAMEORIGIN',
           vary: 'Origin' },
        rawHeaders:
         [ 'Server',
           'nginx',
           'Date',
           'Tue, 19 Feb 2019 09:53:02 GMT',
           'Content-Type',
           'text/html',
           'Content-Length',
           '27',
           'Connection',
           'close',
           'X-Frame-Options',
           'SAMEORIGIN',
           'Vary',
           'Origin' ],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 500,
        statusMessage: 'Internal Server Error',
        client:
         TLSSocket {
           _tlsOptions:
            { pipe: false,
              secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session:
               <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined },
           _secureEstablished: true,
           _securePending: false,
           _newSessionPending: false,
           _controlReleased: true,
           _SNICallback: null,
           servername: 'spark.embiq.com',
           alpnProtocol: false,
           authorized: true,
           authorizationError: null,
           encrypted: true,
           _events:
            [Object: null prototype] {
              close:
               [ [Function: onSocketCloseDestroySSL],
                 { [Function: bound onceWrapper] listener: [Function] },
                 [Function: onClose],
                 [Function: socketCloseListener] ],
              end: [Function: onReadableStreamEnd],
              secure: [Function: onConnectSecure],
              free: [Function: onFree],
              agentRemove: [Function: onRemove],
              drain: [Function: ondrain],
              error: [Function: socketErrorListener],
              finish:
               { [Function: bound onceWrapper] listener: [Function: destroy] } },
           _eventsCount: 8,
           connecting: false,
           _hadError: false,
           _handle:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _parent: null,
           _host: 'spark.embiq.com',
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree:
               { next:
                  { next: null,
                    entry: null,
                    finish: [Function: bound onCorkedFinish] },
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: false,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: undefined,
           _server: null,
           ssl:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _requestCert: true,
           _rejectUnauthorized: true,
           parser: null,
           _httpMessage: [Circular],
           [Symbol(res)]:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           [Symbol(asyncId)]: 31,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0,
           [Symbol(connect-options)]:
            { rejectUnauthorized: true,
              ciphers:
               'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              servername: 'spark.embiq.com',
              _defaultAgent:
               Agent {
                 _events: [Object: null prototype] { free: [Function] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 defaultPort: 443,
                 protocol: 'https:',
                 options: { path: null },
                 requests: {},
                 sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                 freeSockets: {},
                 keepAliveMsecs: 1000,
                 keepAlive: false,
                 maxSockets: Infinity,
                 maxFreeSockets: 256,
                 maxCachedSessions: 100,
                 _sessionCache:
                  { map:
                     { 'spark.embiq.com:443::::::::::::::::':
                        <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                    list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
              maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: null,
              method: 'post',
              headers:
               { Accept: 'application/json, text/plain, */*',
                 'Content-Type': 'application/json;charset=utf-8',
                 'User-Agent': 'axios/0.18.0',
                 'Content-Length': 40 },
              agent: undefined,
              auth: undefined,
              hostname: 'spark.embiq.com',
              port: 443,
              nativeProtocols:
               { 'http:':
                  { _connectionListener: [Function: connectionListener],
                    METHODS:
                     [ 'ACL',
                       'BIND',
                       'CHECKOUT',
                       'CONNECT',
                       'COPY',
                       'DELETE',
                       'GET',
                       'HEAD',
                       'LINK',
                       'LOCK',
                       'M-SEARCH',
                       'MERGE',
                       'MKACTIVITY',
                       'MKCALENDAR',
                       'MKCOL',
                       'MOVE',
                       'NOTIFY',
                       'OPTIONS',
                       'PATCH',
                       'POST',
                       'PROPFIND',
                       'PROPPATCH',
                       'PURGE',
                       'PUT',
                       'REBIND',
                       'REPORT',
                       'SEARCH',
                       'SOURCE',
                       'SUBSCRIBE',
                       'TRACE',
                       'UNBIND',
                       'UNLINK',
                       'UNLOCK',
                       'UNSUBSCRIBE' ],
                    STATUS_CODES:
                     { '100': 'Continue',
                       '101': 'Switching Protocols',
                       '102': 'Processing',
                       '103': 'Early Hints',
                       '200': 'OK',
                       '201': 'Created',
                       '202': 'Accepted',
                       '203': 'Non-Authoritative Information',
                       '204': 'No Content',
                       '205': 'Reset Content',
                       '206': 'Partial Content',
                       '207': 'Multi-Status',
                       '208': 'Already Reported',
                       '226': 'IM Used',
                       '300': 'Multiple Choices',
                       '301': 'Moved Permanently',
                       '302': 'Found',
                       '303': 'See Other',
                       '304': 'Not Modified',
                       '305': 'Use Proxy',
                       '307': 'Temporary Redirect',
                       '308': 'Permanent Redirect',
                       '400': 'Bad Request',
                       '401': 'Unauthorized',
                       '402': 'Payment Required',
                       '403': 'Forbidden',
                       '404': 'Not Found',
                       '405': 'Method Not Allowed',
                       '406': 'Not Acceptable',
                       '407': 'Proxy Authentication Required',
                       '408': 'Request Timeout',
                       '409': 'Conflict',
                       '410': 'Gone',
                       '411': 'Length Required',
                       '412': 'Precondition Failed',
                       '413': 'Payload Too Large',
                       '414': 'URI Too Long',
                       '415': 'Unsupported Media Type',
                       '416': 'Range Not Satisfiable',
                       '417': 'Expectation Failed',
                       '418': "I'm a Teapot",
                       '421': 'Misdirected Request',
                       '422': 'Unprocessable Entity',
                       '423': 'Locked',
                       '424': 'Failed Dependency',
                       '425': 'Unordered Collection',
                       '426': 'Upgrade Required',
                       '428': 'Precondition Required',
                       '429': 'Too Many Requests',
                       '431': 'Request Header Fields Too Large',
                       '451': 'Unavailable For Legal Reasons',
                       '500': 'Internal Server Error',
                       '501': 'Not Implemented',
                       '502': 'Bad Gateway',
                       '503': 'Service Unavailable',
                       '504': 'Gateway Timeout',
                       '505': 'HTTP Version Not Supported',
                       '506': 'Variant Also Negotiates',
                       '507': 'Insufficient Storage',
                       '508': 'Loop Detected',
                       '509': 'Bandwidth Limit Exceeded',
                       '510': 'Not Extended',
                       '511': 'Network Authentication Required' },
                    Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] },
                 'https:':
                  { Agent: [Function: Agent],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 443,
                       protocol: 'https:',
                       options: { path: null },
                       requests: {},
                       sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256,
                       maxCachedSessions: 100,
                       _sessionCache:
                        { map:
                           { 'spark.embiq.com:443::::::::::::::::':
                              <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                          list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] } },
              pathname: '/api/config/tag_positions',
              host: 'spark.embiq.com',
              _agentKey: 'spark.embiq.com:443::::::::::::::::',
              encoding: null,
              session:
               <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
              singleUse: true } },
        _consuming: false,
        _dumped: false,
        req: [Circular],
        responseUrl: 'https://spark.embiq.com/api/config/tag_positions',
        redirects: [] },
     aborted: false,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     _redirectable:
      Writable {
        _writableState:
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: true,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           emitClose: true,
           autoDestroy: false,
           bufferedRequestCount: 0,
           corkedRequestsFree:
            { next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: true,
        _events:
         [Object: null prototype] {
           response: [Function: handleResponse],
           error: [Function: handleRequestError] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _options:
         { maxRedirects: 21,
           maxBodyLength: 10485760,
           protocol: 'https:',
           path: '/api/config/tag_positions',
           method: 'post',
           headers:
            { Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json;charset=utf-8',
              'User-Agent': 'axios/0.18.0',
              'Content-Length': 40 },
           agent: undefined,
           auth: undefined,
           hostname: 'spark.embiq.com',
           port: null,
           nativeProtocols:
            { 'http:':
               { _connectionListener: [Function: connectionListener],
                 METHODS:
                  [ 'ACL',
                    'BIND',
                    'CHECKOUT',
                    'CONNECT',
                    'COPY',
                    'DELETE',
                    'GET',
                    'HEAD',
                    'LINK',
                    'LOCK',
                    'M-SEARCH',
                    'MERGE',
                    'MKACTIVITY',
                    'MKCALENDAR',
                    'MKCOL',
                    'MOVE',
                    'NOTIFY',
                    'OPTIONS',
                    'PATCH',
                    'POST',
                    'PROPFIND',
                    'PROPPATCH',
                    'PURGE',
                    'PUT',
                    'REBIND',
                    'REPORT',
                    'SEARCH',
                    'SOURCE',
                    'SUBSCRIBE',
                    'TRACE',
                    'UNBIND',
                    'UNLINK',
                    'UNLOCK',
                    'UNSUBSCRIBE' ],
                 STATUS_CODES:
                  { '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Unordered Collection',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required' },
                 Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                 ClientRequest: [Function: ClientRequest],
                 globalAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 80,
                    protocol: 'http:',
                    options: { path: null },
                    requests: {},
                    sockets: {},
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256 },
                 IncomingMessage: [Function: IncomingMessage],
                 OutgoingMessage: [Function: OutgoingMessage],
                 Server: [Function: Server],
                 ServerResponse: [Function: ServerResponse],
                 createServer: [Function: createServer],
                 get: [Function: get],
                 request: [Function: request] },
              'https:':
               { Agent: [Function: Agent],
                 globalAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: { path: null },
                    requests: {},
                    sockets:
                     { 'spark.embiq.com:443::::::::::::::::':
                        [ TLSSocket {
                            _tlsOptions:
                             { pipe: false,
                               secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                               isServer: false,
                               requestCert: true,
                               rejectUnauthorized: true,
                               session:
                                <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
                               ALPNProtocols: undefined,
                               requestOCSP: undefined },
                            _secureEstablished: true,
                            _securePending: false,
                            _newSessionPending: false,
                            _controlReleased: true,
                            _SNICallback: null,
                            servername: 'spark.embiq.com',
                            alpnProtocol: false,
                            authorized: true,
                            authorizationError: null,
                            encrypted: true,
                            _events:
                             [Object: null prototype] {
                               close:
                                [ [Function: onSocketCloseDestroySSL],
                                  { [Function: bound onceWrapper] listener: [Function] },
                                  [Function: onClose],
                                  [Function: socketCloseListener] ],
                               end: [Function: onReadableStreamEnd],
                               secure: [Function: onConnectSecure],
                               free: [Function: onFree],
                               agentRemove: [Function: onRemove],
                               drain: [Function: ondrain],
                               error: [Function: socketErrorListener],
                               finish:
                                { [Function: bound onceWrapper] listener: [Function: destroy] } },
                            _eventsCount: 8,
                            connecting: false,
                            _hadError: false,
                            _handle:
                             TLSWrap {
                               _parent:
                                TCP {
                                  reading: [Getter/Setter],
                                  onread: null,
                                  onconnection: null,
                                  [Symbol(owner)]: [Circular] },
                               _parentWrap: undefined,
                               _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                               reading: true,
                               onread: [Function: onStreamRead],
                               onhandshakestart: [Function: noop],
                               onhandshakedone: [Function: bound ],
                               onocspresponse: [Function: onocspresponse],
                               onerror: [Function: onerror],
                               [Symbol(owner)]: [Circular] },
                            _parent: null,
                            _host: 'spark.embiq.com',
                            _readableState:
                             ReadableState {
                               objectMode: false,
                               highWaterMark: 16384,
                               buffer: BufferList { head: null, tail: null, length: 0 },
                               length: 0,
                               pipes: null,
                               pipesCount: 0,
                               flowing: true,
                               ended: false,
                               endEmitted: false,
                               reading: true,
                               sync: false,
                               needReadable: true,
                               emittedReadable: false,
                               readableListening: false,
                               resumeScheduled: false,
                               emitClose: false,
                               autoDestroy: false,
                               destroyed: false,
                               defaultEncoding: 'utf8',
                               awaitDrain: 0,
                               readingMore: false,
                               decoder: null,
                               encoding: null },
                            readable: true,
                            _maxListeners: undefined,
                            _writableState:
                             WritableState {
                               objectMode: false,
                               highWaterMark: 16384,
                               finalCalled: true,
                               needDrain: false,
                               ending: true,
                               ended: true,
                               finished: false,
                               destroyed: false,
                               decodeStrings: false,
                               defaultEncoding: 'utf8',
                               length: 0,
                               writing: false,
                               corked: 0,
                               sync: false,
                               bufferProcessing: false,
                               onwrite: [Function: bound onwrite],
                               writecb: null,
                               writelen: 0,
                               bufferedRequest: null,
                               lastBufferedRequest: null,
                               pendingcb: 1,
                               prefinished: false,
                               errorEmitted: false,
                               emitClose: false,
                               autoDestroy: false,
                               bufferedRequestCount: 0,
                               corkedRequestsFree:
                                { next:
                                   { next: null,
                                     entry: null,
                                     finish: [Function: bound onCorkedFinish] },
                                  entry: null,
                                  finish: [Function: bound onCorkedFinish] } },
                            writable: false,
                            allowHalfOpen: false,
                            _sockname: null,
                            _pendingData: null,
                            _pendingEncoding: '',
                            server: undefined,
                            _server: null,
                            ssl:
                             TLSWrap {
                               _parent:
                                TCP {
                                  reading: [Getter/Setter],
                                  onread: null,
                                  onconnection: null,
                                  [Symbol(owner)]: [Circular] },
                               _parentWrap: undefined,
                               _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                               reading: true,
                               onread: [Function: onStreamRead],
                               onhandshakestart: [Function: noop],
                               onhandshakedone: [Function: bound ],
                               onocspresponse: [Function: onocspresponse],
                               onerror: [Function: onerror],
                               [Symbol(owner)]: [Circular] },
                            _requestCert: true,
                            _rejectUnauthorized: true,
                            parser: null,
                            _httpMessage: [Circular],
                            [Symbol(res)]:
                             TLSWrap {
                               _parent:
                                TCP {
                                  reading: [Getter/Setter],
                                  onread: null,
                                  onconnection: null,
                                  [Symbol(owner)]: [Circular] },
                               _parentWrap: undefined,
                               _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                               reading: true,
                               onread: [Function: onStreamRead],
                               onhandshakestart: [Function: noop],
                               onhandshakedone: [Function: bound ],
                               onocspresponse: [Function: onocspresponse],
                               onerror: [Function: onerror],
                               [Symbol(owner)]: [Circular] },
                            [Symbol(asyncId)]: 31,
                            [Symbol(lastWriteQueueSize)]: 0,
                            [Symbol(timeout)]: null,
                            [Symbol(kBytesRead)]: 0,
                            [Symbol(kBytesWritten)]: 0,
                            [Symbol(connect-options)]:
                             { rejectUnauthorized: true,
                               ciphers:
                                'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                               checkServerIdentity: [Function: checkServerIdentity],
                               minDHSize: 1024,
                               servername: 'spark.embiq.com',
                               _defaultAgent: [Circular],
                               maxRedirects: 21,
                               maxBodyLength: 10485760,
                               protocol: 'https:',
                               path: null,
                               method: 'post',
                               headers:
                                { Accept: 'application/json, text/plain, */*',
                                  'Content-Type': 'application/json;charset=utf-8',
                                  'User-Agent': 'axios/0.18.0',
                                  'Content-Length': 40 },
                               agent: undefined,
                               auth: undefined,
                               hostname: 'spark.embiq.com',
                               port: 443,
                               nativeProtocols: [Circular],
                               pathname: '/api/config/tag_positions',
                               host: 'spark.embiq.com',
                               _agentKey: 'spark.embiq.com:443::::::::::::::::',
                               encoding: null,
                               session:
                                <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
                               singleUse: true } } ] },
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    maxCachedSessions: 100,
                    _sessionCache:
                     { map:
                        { 'spark.embiq.com:443::::::::::::::::':
                           <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                       list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                 Server: [Function: Server],
                 createServer: [Function: createServer],
                 get: [Function: get],
                 request: [Function: request] } },
           pathname: '/api/config/tag_positions' },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 40,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function],
        _currentRequest: [Circular],
        _currentUrl: 'https://spark.embiq.com/api/config/tag_positions' },
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json;charset=utf-8' ],
        'user-agent': [ 'User-Agent', 'axios/0.18.0' ],
        'content-length': [ 'Content-Length', 40 ],
        host: [ 'Host', 'spark.embiq.com' ] } },
  response:
   { status: 500,
     statusText: 'Internal Server Error',
     headers:
      { server: 'nginx',
        date: 'Tue, 19 Feb 2019 09:53:02 GMT',
        'content-type': 'text/html',
        'content-length': '27',
        connection: 'close',
        'x-frame-options': 'SAMEORIGIN',
        vary: 'Origin' },
     config:
      { adapter: [Function: httpAdapter],
        transformRequest: { '0': [Function: transformRequest] },
        transformResponse: { '0': [Function: transformResponse] },
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        validateStatus: [Function: validateStatus],
        headers:
         { Accept: 'application/json, text/plain, */*',
           'Content-Type': 'application/json;charset=utf-8',
           'User-Agent': 'axios/0.18.0',
           'Content-Length': 40 },
        method: 'post',
        url: 'https://spark.embiq.com/api/config/tag_positions',
        data: '{"devaddr":"TAG1","data":"00D800120000"}' },
     request:
      ClientRequest {
        _events:
         [Object: null prototype] {
           socket: [Function],
           abort: [Function],
           aborted: [Function],
           error: [Function],
           timeout: [Function],
           prefinish: [Function: requestOnPrefinish] },
        _eventsCount: 6,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket:
         TLSSocket {
           _tlsOptions:
            { pipe: false,
              secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session:
               <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined },
           _secureEstablished: true,
           _securePending: false,
           _newSessionPending: false,
           _controlReleased: true,
           _SNICallback: null,
           servername: 'spark.embiq.com',
           alpnProtocol: false,
           authorized: true,
           authorizationError: null,
           encrypted: true,
           _events:
            [Object: null prototype] {
              close:
               [ [Function: onSocketCloseDestroySSL],
                 { [Function: bound onceWrapper] listener: [Function] },
                 [Function: onClose],
                 [Function: socketCloseListener] ],
              end: [Function: onReadableStreamEnd],
              secure: [Function: onConnectSecure],
              free: [Function: onFree],
              agentRemove: [Function: onRemove],
              drain: [Function: ondrain],
              error: [Function: socketErrorListener],
              finish:
               { [Function: bound onceWrapper] listener: [Function: destroy] } },
           _eventsCount: 8,
           connecting: false,
           _hadError: false,
           _handle:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _parent: null,
           _host: 'spark.embiq.com',
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree:
               { next:
                  { next: null,
                    entry: null,
                    finish: [Function: bound onCorkedFinish] },
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: false,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: undefined,
           _server: null,
           ssl:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _requestCert: true,
           _rejectUnauthorized: true,
           parser: null,
           _httpMessage: [Circular],
           [Symbol(res)]:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           [Symbol(asyncId)]: 31,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0,
           [Symbol(connect-options)]:
            { rejectUnauthorized: true,
              ciphers:
               'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              servername: 'spark.embiq.com',
              _defaultAgent:
               Agent {
                 _events: [Object: null prototype] { free: [Function] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 defaultPort: 443,
                 protocol: 'https:',
                 options: { path: null },
                 requests: {},
                 sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                 freeSockets: {},
                 keepAliveMsecs: 1000,
                 keepAlive: false,
                 maxSockets: Infinity,
                 maxFreeSockets: 256,
                 maxCachedSessions: 100,
                 _sessionCache:
                  { map:
                     { 'spark.embiq.com:443::::::::::::::::':
                        <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                    list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
              maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: null,
              method: 'post',
              headers:
               { Accept: 'application/json, text/plain, */*',
                 'Content-Type': 'application/json;charset=utf-8',
                 'User-Agent': 'axios/0.18.0',
                 'Content-Length': 40 },
              agent: undefined,
              auth: undefined,
              hostname: 'spark.embiq.com',
              port: 443,
              nativeProtocols:
               { 'http:':
                  { _connectionListener: [Function: connectionListener],
                    METHODS:
                     [ 'ACL',
                       'BIND',
                       'CHECKOUT',
                       'CONNECT',
                       'COPY',
                       'DELETE',
                       'GET',
                       'HEAD',
                       'LINK',
                       'LOCK',
                       'M-SEARCH',
                       'MERGE',
                       'MKACTIVITY',
                       'MKCALENDAR',
                       'MKCOL',
                       'MOVE',
                       'NOTIFY',
                       'OPTIONS',
                       'PATCH',
                       'POST',
                       'PROPFIND',
                       'PROPPATCH',
                       'PURGE',
                       'PUT',
                       'REBIND',
                       'REPORT',
                       'SEARCH',
                       'SOURCE',
                       'SUBSCRIBE',
                       'TRACE',
                       'UNBIND',
                       'UNLINK',
                       'UNLOCK',
                       'UNSUBSCRIBE' ],
                    STATUS_CODES:
                     { '100': 'Continue',
                       '101': 'Switching Protocols',
                       '102': 'Processing',
                       '103': 'Early Hints',
                       '200': 'OK',
                       '201': 'Created',
                       '202': 'Accepted',
                       '203': 'Non-Authoritative Information',
                       '204': 'No Content',
                       '205': 'Reset Content',
                       '206': 'Partial Content',
                       '207': 'Multi-Status',
                       '208': 'Already Reported',
                       '226': 'IM Used',
                       '300': 'Multiple Choices',
                       '301': 'Moved Permanently',
                       '302': 'Found',
                       '303': 'See Other',
                       '304': 'Not Modified',
                       '305': 'Use Proxy',
                       '307': 'Temporary Redirect',
                       '308': 'Permanent Redirect',
                       '400': 'Bad Request',
                       '401': 'Unauthorized',
                       '402': 'Payment Required',
                       '403': 'Forbidden',
                       '404': 'Not Found',
                       '405': 'Method Not Allowed',
                       '406': 'Not Acceptable',
                       '407': 'Proxy Authentication Required',
                       '408': 'Request Timeout',
                       '409': 'Conflict',
                       '410': 'Gone',
                       '411': 'Length Required',
                       '412': 'Precondition Failed',
                       '413': 'Payload Too Large',
                       '414': 'URI Too Long',
                       '415': 'Unsupported Media Type',
                       '416': 'Range Not Satisfiable',
                       '417': 'Expectation Failed',
                       '418': "I'm a Teapot",
                       '421': 'Misdirected Request',
                       '422': 'Unprocessable Entity',
                       '423': 'Locked',
                       '424': 'Failed Dependency',
                       '425': 'Unordered Collection',
                       '426': 'Upgrade Required',
                       '428': 'Precondition Required',
                       '429': 'Too Many Requests',
                       '431': 'Request Header Fields Too Large',
                       '451': 'Unavailable For Legal Reasons',
                       '500': 'Internal Server Error',
                       '501': 'Not Implemented',
                       '502': 'Bad Gateway',
                       '503': 'Service Unavailable',
                       '504': 'Gateway Timeout',
                       '505': 'HTTP Version Not Supported',
                       '506': 'Variant Also Negotiates',
                       '507': 'Insufficient Storage',
                       '508': 'Loop Detected',
                       '509': 'Bandwidth Limit Exceeded',
                       '510': 'Not Extended',
                       '511': 'Network Authentication Required' },
                    Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] },
                 'https:':
                  { Agent: [Function: Agent],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 443,
                       protocol: 'https:',
                       options: { path: null },
                       requests: {},
                       sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256,
                       maxCachedSessions: 100,
                       _sessionCache:
                        { map:
                           { 'spark.embiq.com:443::::::::::::::::':
                              <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                          list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] } },
              pathname: '/api/config/tag_positions',
              host: 'spark.embiq.com',
              _agentKey: 'spark.embiq.com:443::::::::::::::::',
              encoding: null,
              session:
               <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
              singleUse: true } },
        connection:
         TLSSocket {
           _tlsOptions:
            { pipe: false,
              secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session:
               <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined },
           _secureEstablished: true,
           _securePending: false,
           _newSessionPending: false,
           _controlReleased: true,
           _SNICallback: null,
           servername: 'spark.embiq.com',
           alpnProtocol: false,
           authorized: true,
           authorizationError: null,
           encrypted: true,
           _events:
            [Object: null prototype] {
              close:
               [ [Function: onSocketCloseDestroySSL],
                 { [Function: bound onceWrapper] listener: [Function] },
                 [Function: onClose],
                 [Function: socketCloseListener] ],
              end: [Function: onReadableStreamEnd],
              secure: [Function: onConnectSecure],
              free: [Function: onFree],
              agentRemove: [Function: onRemove],
              drain: [Function: ondrain],
              error: [Function: socketErrorListener],
              finish:
               { [Function: bound onceWrapper] listener: [Function: destroy] } },
           _eventsCount: 8,
           connecting: false,
           _hadError: false,
           _handle:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _parent: null,
           _host: 'spark.embiq.com',
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree:
               { next:
                  { next: null,
                    entry: null,
                    finish: [Function: bound onCorkedFinish] },
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: false,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: undefined,
           _server: null,
           ssl:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           _requestCert: true,
           _rejectUnauthorized: true,
           parser: null,
           _httpMessage: [Circular],
           [Symbol(res)]:
            TLSWrap {
              _parent:
               TCP {
                 reading: [Getter/Setter],
                 onread: null,
                 onconnection: null,
                 [Symbol(owner)]: [Circular] },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
              reading: true,
              onread: [Function: onStreamRead],
              onhandshakestart: [Function: noop],
              onhandshakedone: [Function: bound ],
              onocspresponse: [Function: onocspresponse],
              onerror: [Function: onerror],
              [Symbol(owner)]: [Circular] },
           [Symbol(asyncId)]: 31,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0,
           [Symbol(connect-options)]:
            { rejectUnauthorized: true,
              ciphers:
               'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              servername: 'spark.embiq.com',
              _defaultAgent:
               Agent {
                 _events: [Object: null prototype] { free: [Function] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 defaultPort: 443,
                 protocol: 'https:',
                 options: { path: null },
                 requests: {},
                 sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                 freeSockets: {},
                 keepAliveMsecs: 1000,
                 keepAlive: false,
                 maxSockets: Infinity,
                 maxFreeSockets: 256,
                 maxCachedSessions: 100,
                 _sessionCache:
                  { map:
                     { 'spark.embiq.com:443::::::::::::::::':
                        <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                    list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
              maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: null,
              method: 'post',
              headers:
               { Accept: 'application/json, text/plain, */*',
                 'Content-Type': 'application/json;charset=utf-8',
                 'User-Agent': 'axios/0.18.0',
                 'Content-Length': 40 },
              agent: undefined,
              auth: undefined,
              hostname: 'spark.embiq.com',
              port: 443,
              nativeProtocols:
               { 'http:':
                  { _connectionListener: [Function: connectionListener],
                    METHODS:
                     [ 'ACL',
                       'BIND',
                       'CHECKOUT',
                       'CONNECT',
                       'COPY',
                       'DELETE',
                       'GET',
                       'HEAD',
                       'LINK',
                       'LOCK',
                       'M-SEARCH',
                       'MERGE',
                       'MKACTIVITY',
                       'MKCALENDAR',
                       'MKCOL',
                       'MOVE',
                       'NOTIFY',
                       'OPTIONS',
                       'PATCH',
                       'POST',
                       'PROPFIND',
                       'PROPPATCH',
                       'PURGE',
                       'PUT',
                       'REBIND',
                       'REPORT',
                       'SEARCH',
                       'SOURCE',
                       'SUBSCRIBE',
                       'TRACE',
                       'UNBIND',
                       'UNLINK',
                       'UNLOCK',
                       'UNSUBSCRIBE' ],
                    STATUS_CODES:
                     { '100': 'Continue',
                       '101': 'Switching Protocols',
                       '102': 'Processing',
                       '103': 'Early Hints',
                       '200': 'OK',
                       '201': 'Created',
                       '202': 'Accepted',
                       '203': 'Non-Authoritative Information',
                       '204': 'No Content',
                       '205': 'Reset Content',
                       '206': 'Partial Content',
                       '207': 'Multi-Status',
                       '208': 'Already Reported',
                       '226': 'IM Used',
                       '300': 'Multiple Choices',
                       '301': 'Moved Permanently',
                       '302': 'Found',
                       '303': 'See Other',
                       '304': 'Not Modified',
                       '305': 'Use Proxy',
                       '307': 'Temporary Redirect',
                       '308': 'Permanent Redirect',
                       '400': 'Bad Request',
                       '401': 'Unauthorized',
                       '402': 'Payment Required',
                       '403': 'Forbidden',
                       '404': 'Not Found',
                       '405': 'Method Not Allowed',
                       '406': 'Not Acceptable',
                       '407': 'Proxy Authentication Required',
                       '408': 'Request Timeout',
                       '409': 'Conflict',
                       '410': 'Gone',
                       '411': 'Length Required',
                       '412': 'Precondition Failed',
                       '413': 'Payload Too Large',
                       '414': 'URI Too Long',
                       '415': 'Unsupported Media Type',
                       '416': 'Range Not Satisfiable',
                       '417': 'Expectation Failed',
                       '418': "I'm a Teapot",
                       '421': 'Misdirected Request',
                       '422': 'Unprocessable Entity',
                       '423': 'Locked',
                       '424': 'Failed Dependency',
                       '425': 'Unordered Collection',
                       '426': 'Upgrade Required',
                       '428': 'Precondition Required',
                       '429': 'Too Many Requests',
                       '431': 'Request Header Fields Too Large',
                       '451': 'Unavailable For Legal Reasons',
                       '500': 'Internal Server Error',
                       '501': 'Not Implemented',
                       '502': 'Bad Gateway',
                       '503': 'Service Unavailable',
                       '504': 'Gateway Timeout',
                       '505': 'HTTP Version Not Supported',
                       '506': 'Variant Also Negotiates',
                       '507': 'Insufficient Storage',
                       '508': 'Loop Detected',
                       '509': 'Bandwidth Limit Exceeded',
                       '510': 'Not Extended',
                       '511': 'Network Authentication Required' },
                    Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] },
                 'https:':
                  { Agent: [Function: Agent],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 443,
                       protocol: 'https:',
                       options: { path: null },
                       requests: {},
                       sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256,
                       maxCachedSessions: 100,
                       _sessionCache:
                        { map:
                           { 'spark.embiq.com:443::::::::::::::::':
                              <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                          list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] } },
              pathname: '/api/config/tag_positions',
              host: 'spark.embiq.com',
              _agentKey: 'spark.embiq.com:443::::::::::::::::',
              encoding: null,
              session:
               <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
              singleUse: true } },
        _header:
         'POST /api/config/tag_positions HTTP/1.1\r\nAccept: application/json, text/plain, */*\r\nContent-Type: application/json;charset=utf-8\r\nUser-Agent: axios/0.18.0\r\nContent-Length: 40\r\nHost: spark.embiq.com\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent:
         Agent {
           _events: [Object: null prototype] { free: [Function] },
           _eventsCount: 1,
           _maxListeners: undefined,
           defaultPort: 443,
           protocol: 'https:',
           options: { path: null },
           requests: {},
           sockets:
            { 'spark.embiq.com:443::::::::::::::::':
               [ TLSSocket {
                   _tlsOptions:
                    { pipe: false,
                      secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: true,
                      session:
                       <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined },
                   _secureEstablished: true,
                   _securePending: false,
                   _newSessionPending: false,
                   _controlReleased: true,
                   _SNICallback: null,
                   servername: 'spark.embiq.com',
                   alpnProtocol: false,
                   authorized: true,
                   authorizationError: null,
                   encrypted: true,
                   _events:
                    [Object: null prototype] {
                      close:
                       [ [Function: onSocketCloseDestroySSL],
                         { [Function: bound onceWrapper] listener: [Function] },
                         [Function: onClose],
                         [Function: socketCloseListener] ],
                      end: [Function: onReadableStreamEnd],
                      secure: [Function: onConnectSecure],
                      free: [Function: onFree],
                      agentRemove: [Function: onRemove],
                      drain: [Function: ondrain],
                      error: [Function: socketErrorListener],
                      finish:
                       { [Function: bound onceWrapper] listener: [Function: destroy] } },
                   _eventsCount: 8,
                   connecting: false,
                   _hadError: false,
                   _handle:
                    TLSWrap {
                      _parent:
                       TCP {
                         reading: [Getter/Setter],
                         onread: null,
                         onconnection: null,
                         [Symbol(owner)]: [Circular] },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                      reading: true,
                      onread: [Function: onStreamRead],
                      onhandshakestart: [Function: noop],
                      onhandshakedone: [Function: bound ],
                      onocspresponse: [Function: onocspresponse],
                      onerror: [Function: onerror],
                      [Symbol(owner)]: [Circular] },
                   _parent: null,
                   _host: 'spark.embiq.com',
                   _readableState:
                    ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: null,
                      pipesCount: 0,
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      emitClose: false,
                      autoDestroy: false,
                      destroyed: false,
                      defaultEncoding: 'utf8',
                      awaitDrain: 0,
                      readingMore: false,
                      decoder: null,
                      encoding: null },
                   readable: true,
                   _maxListeners: undefined,
                   _writableState:
                    WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: true,
                      needDrain: false,
                      ending: true,
                      ended: true,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      bufferedRequest: null,
                      lastBufferedRequest: null,
                      pendingcb: 1,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: false,
                      bufferedRequestCount: 0,
                      corkedRequestsFree:
                       { next:
                          { next: null,
                            entry: null,
                            finish: [Function: bound onCorkedFinish] },
                         entry: null,
                         finish: [Function: bound onCorkedFinish] } },
                   writable: false,
                   allowHalfOpen: false,
                   _sockname: null,
                   _pendingData: null,
                   _pendingEncoding: '',
                   server: undefined,
                   _server: null,
                   ssl:
                    TLSWrap {
                      _parent:
                       TCP {
                         reading: [Getter/Setter],
                         onread: null,
                         onconnection: null,
                         [Symbol(owner)]: [Circular] },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                      reading: true,
                      onread: [Function: onStreamRead],
                      onhandshakestart: [Function: noop],
                      onhandshakedone: [Function: bound ],
                      onocspresponse: [Function: onocspresponse],
                      onerror: [Function: onerror],
                      [Symbol(owner)]: [Circular] },
                   _requestCert: true,
                   _rejectUnauthorized: true,
                   parser: null,
                   _httpMessage: [Circular],
                   [Symbol(res)]:
                    TLSWrap {
                      _parent:
                       TCP {
                         reading: [Getter/Setter],
                         onread: null,
                         onconnection: null,
                         [Symbol(owner)]: [Circular] },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                      reading: true,
                      onread: [Function: onStreamRead],
                      onhandshakestart: [Function: noop],
                      onhandshakedone: [Function: bound ],
                      onocspresponse: [Function: onocspresponse],
                      onerror: [Function: onerror],
                      [Symbol(owner)]: [Circular] },
                   [Symbol(asyncId)]: 31,
                   [Symbol(lastWriteQueueSize)]: 0,
                   [Symbol(timeout)]: null,
                   [Symbol(kBytesRead)]: 0,
                   [Symbol(kBytesWritten)]: 0,
                   [Symbol(connect-options)]:
                    { rejectUnauthorized: true,
                      ciphers:
                       'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: [Function: checkServerIdentity],
                      minDHSize: 1024,
                      servername: 'spark.embiq.com',
                      _defaultAgent: [Circular],
                      maxRedirects: 21,
                      maxBodyLength: 10485760,
                      protocol: 'https:',
                      path: null,
                      method: 'post',
                      headers:
                       { Accept: 'application/json, text/plain, */*',
                         'Content-Type': 'application/json;charset=utf-8',
                         'User-Agent': 'axios/0.18.0',
                         'Content-Length': 40 },
                      agent: undefined,
                      auth: undefined,
                      hostname: 'spark.embiq.com',
                      port: 443,
                      nativeProtocols:
                       { 'http:':
                          { _connectionListener: [Function: connectionListener],
                            METHODS:
                             [ 'ACL',
                               'BIND',
                               'CHECKOUT',
                               'CONNECT',
                               'COPY',
                               'DELETE',
                               'GET',
                               'HEAD',
                               'LINK',
                               'LOCK',
                               'M-SEARCH',
                               'MERGE',
                               'MKACTIVITY',
                               'MKCALENDAR',
                               'MKCOL',
                               'MOVE',
                               'NOTIFY',
                               'OPTIONS',
                               'PATCH',
                               'POST',
                               'PROPFIND',
                               'PROPPATCH',
                               'PURGE',
                               'PUT',
                               'REBIND',
                               'REPORT',
                               'SEARCH',
                               'SOURCE',
                               'SUBSCRIBE',
                               'TRACE',
                               'UNBIND',
                               'UNLINK',
                               'UNLOCK',
                               'UNSUBSCRIBE' ],
                            STATUS_CODES:
                             { '100': 'Continue',
                               '101': 'Switching Protocols',
                               '102': 'Processing',
                               '103': 'Early Hints',
                               '200': 'OK',
                               '201': 'Created',
                               '202': 'Accepted',
                               '203': 'Non-Authoritative Information',
                               '204': 'No Content',
                               '205': 'Reset Content',
                               '206': 'Partial Content',
                               '207': 'Multi-Status',
                               '208': 'Already Reported',
                               '226': 'IM Used',
                               '300': 'Multiple Choices',
                               '301': 'Moved Permanently',
                               '302': 'Found',
                               '303': 'See Other',
                               '304': 'Not Modified',
                               '305': 'Use Proxy',
                               '307': 'Temporary Redirect',
                               '308': 'Permanent Redirect',
                               '400': 'Bad Request',
                               '401': 'Unauthorized',
                               '402': 'Payment Required',
                               '403': 'Forbidden',
                               '404': 'Not Found',
                               '405': 'Method Not Allowed',
                               '406': 'Not Acceptable',
                               '407': 'Proxy Authentication Required',
                               '408': 'Request Timeout',
                               '409': 'Conflict',
                               '410': 'Gone',
                               '411': 'Length Required',
                               '412': 'Precondition Failed',
                               '413': 'Payload Too Large',
                               '414': 'URI Too Long',
                               '415': 'Unsupported Media Type',
                               '416': 'Range Not Satisfiable',
                               '417': 'Expectation Failed',
                               '418': "I'm a Teapot",
                               '421': 'Misdirected Request',
                               '422': 'Unprocessable Entity',
                               '423': 'Locked',
                               '424': 'Failed Dependency',
                               '425': 'Unordered Collection',
                               '426': 'Upgrade Required',
                               '428': 'Precondition Required',
                               '429': 'Too Many Requests',
                               '431': 'Request Header Fields Too Large',
                               '451': 'Unavailable For Legal Reasons',
                               '500': 'Internal Server Error',
                               '501': 'Not Implemented',
                               '502': 'Bad Gateway',
                               '503': 'Service Unavailable',
                               '504': 'Gateway Timeout',
                               '505': 'HTTP Version Not Supported',
                               '506': 'Variant Also Negotiates',
                               '507': 'Insufficient Storage',
                               '508': 'Loop Detected',
                               '509': 'Bandwidth Limit Exceeded',
                               '510': 'Not Extended',
                               '511': 'Network Authentication Required' },
                            Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                            ClientRequest: [Function: ClientRequest],
                            globalAgent:
                             Agent {
                               _events: [Object: null prototype] { free: [Function] },
                               _eventsCount: 1,
                               _maxListeners: undefined,
                               defaultPort: 80,
                               protocol: 'http:',
                               options: { path: null },
                               requests: {},
                               sockets: {},
                               freeSockets: {},
                               keepAliveMsecs: 1000,
                               keepAlive: false,
                               maxSockets: Infinity,
                               maxFreeSockets: 256 },
                            IncomingMessage: [Function: IncomingMessage],
                            OutgoingMessage: [Function: OutgoingMessage],
                            Server: [Function: Server],
                            ServerResponse: [Function: ServerResponse],
                            createServer: [Function: createServer],
                            get: [Function: get],
                            request: [Function: request] },
                         'https:':
                          { Agent: [Function: Agent],
                            globalAgent: [Circular],
                            Server: [Function: Server],
                            createServer: [Function: createServer],
                            get: [Function: get],
                            request: [Function: request] } },
                      pathname: '/api/config/tag_positions',
                      host: 'spark.embiq.com',
                      _agentKey: 'spark.embiq.com:443::::::::::::::::',
                      encoding: null,
                      session:
                       <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
                      singleUse: true } } ] },
           freeSockets: {},
           keepAliveMsecs: 1000,
           keepAlive: false,
           maxSockets: Infinity,
           maxFreeSockets: 256,
           maxCachedSessions: 100,
           _sessionCache:
            { map:
               { 'spark.embiq.com:443::::::::::::::::':
                  <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
              list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/api/config/tag_positions',
        _ended: true,
        res:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: true,
              endEmitted: true,
              reading: false,
              sync: true,
              needReadable: false,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: true,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: true,
              decoder: null,
              encoding: null },
           readable: false,
           _events:
            [Object: null prototype] {
              end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
              data: [Function: handleStreamData],
              error: [Function: handleStreamError] },
           _eventsCount: 3,
           _maxListeners: undefined,
           socket:
            TLSSocket {
              _tlsOptions:
               { pipe: false,
                 secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 isServer: false,
                 requestCert: true,
                 rejectUnauthorized: true,
                 session:
                  <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
                 ALPNProtocols: undefined,
                 requestOCSP: undefined },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              _SNICallback: null,
              servername: 'spark.embiq.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events:
               [Object: null prototype] {
                 close:
                  [ [Function: onSocketCloseDestroySSL],
                    { [Function: bound onceWrapper] listener: [Function] },
                    [Function: onClose],
                    [Function: socketCloseListener] ],
                 end: [Function: onReadableStreamEnd],
                 secure: [Function: onConnectSecure],
                 free: [Function: onFree],
                 agentRemove: [Function: onRemove],
                 drain: [Function: ondrain],
                 error: [Function: socketErrorListener],
                 finish:
                  { [Function: bound onceWrapper] listener: [Function: destroy] } },
              _eventsCount: 8,
              connecting: false,
              _hadError: false,
              _handle:
               TLSWrap {
                 _parent:
                  TCP {
                    reading: [Getter/Setter],
                    onread: null,
                    onconnection: null,
                    [Symbol(owner)]: [Circular] },
                 _parentWrap: undefined,
                 _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 reading: true,
                 onread: [Function: onStreamRead],
                 onhandshakestart: [Function: noop],
                 onhandshakedone: [Function: bound ],
                 onocspresponse: [Function: onocspresponse],
                 onerror: [Function: onerror],
                 [Symbol(owner)]: [Circular] },
              _parent: null,
              _host: 'spark.embiq.com',
              _readableState:
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: BufferList { head: null, tail: null, length: 0 },
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: true,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 emitClose: false,
                 autoDestroy: false,
                 destroyed: false,
                 defaultEncoding: 'utf8',
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              _maxListeners: undefined,
              _writableState:
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 finalCalled: true,
                 needDrain: false,
                 ending: true,
                 ended: true,
                 finished: false,
                 destroyed: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: false,
                 bufferProcessing: false,
                 onwrite: [Function: bound onwrite],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 1,
                 prefinished: false,
                 errorEmitted: false,
                 emitClose: false,
                 autoDestroy: false,
                 bufferedRequestCount: 0,
                 corkedRequestsFree:
                  { next:
                     { next: null,
                       entry: null,
                       finish: [Function: bound onCorkedFinish] },
                    entry: null,
                    finish: [Function: bound onCorkedFinish] } },
              writable: false,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl:
               TLSWrap {
                 _parent:
                  TCP {
                    reading: [Getter/Setter],
                    onread: null,
                    onconnection: null,
                    [Symbol(owner)]: [Circular] },
                 _parentWrap: undefined,
                 _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 reading: true,
                 onread: [Function: onStreamRead],
                 onhandshakestart: [Function: noop],
                 onhandshakedone: [Function: bound ],
                 onocspresponse: [Function: onocspresponse],
                 onerror: [Function: onerror],
                 [Symbol(owner)]: [Circular] },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular],
              [Symbol(res)]:
               TLSWrap {
                 _parent:
                  TCP {
                    reading: [Getter/Setter],
                    onread: null,
                    onconnection: null,
                    [Symbol(owner)]: [Circular] },
                 _parentWrap: undefined,
                 _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 reading: true,
                 onread: [Function: onStreamRead],
                 onhandshakestart: [Function: noop],
                 onhandshakedone: [Function: bound ],
                 onocspresponse: [Function: onocspresponse],
                 onerror: [Function: onerror],
                 [Symbol(owner)]: [Circular] },
              [Symbol(asyncId)]: 31,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]:
               { rejectUnauthorized: true,
                 ciphers:
                  'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                 checkServerIdentity: [Function: checkServerIdentity],
                 minDHSize: 1024,
                 servername: 'spark.embiq.com',
                 _defaultAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: { path: null },
                    requests: {},
                    sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    maxCachedSessions: 100,
                    _sessionCache:
                     { map:
                        { 'spark.embiq.com:443::::::::::::::::':
                           <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                       list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                 maxRedirects: 21,
                 maxBodyLength: 10485760,
                 protocol: 'https:',
                 path: null,
                 method: 'post',
                 headers:
                  { Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json;charset=utf-8',
                    'User-Agent': 'axios/0.18.0',
                    'Content-Length': 40 },
                 agent: undefined,
                 auth: undefined,
                 hostname: 'spark.embiq.com',
                 port: 443,
                 nativeProtocols:
                  { 'http:':
                     { _connectionListener: [Function: connectionListener],
                       METHODS:
                        [ 'ACL',
                          'BIND',
                          'CHECKOUT',
                          'CONNECT',
                          'COPY',
                          'DELETE',
                          'GET',
                          'HEAD',
                          'LINK',
                          'LOCK',
                          'M-SEARCH',
                          'MERGE',
                          'MKACTIVITY',
                          'MKCALENDAR',
                          'MKCOL',
                          'MOVE',
                          'NOTIFY',
                          'OPTIONS',
                          'PATCH',
                          'POST',
                          'PROPFIND',
                          'PROPPATCH',
                          'PURGE',
                          'PUT',
                          'REBIND',
                          'REPORT',
                          'SEARCH',
                          'SOURCE',
                          'SUBSCRIBE',
                          'TRACE',
                          'UNBIND',
                          'UNLINK',
                          'UNLOCK',
                          'UNSUBSCRIBE' ],
                       STATUS_CODES:
                        { '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Unordered Collection',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required' },
                       Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                       ClientRequest: [Function: ClientRequest],
                       globalAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       IncomingMessage: [Function: IncomingMessage],
                       OutgoingMessage: [Function: OutgoingMessage],
                       Server: [Function: Server],
                       ServerResponse: [Function: ServerResponse],
                       createServer: [Function: createServer],
                       get: [Function: get],
                       request: [Function: request] },
                    'https:':
                     { Agent: [Function: Agent],
                       globalAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: { path: null },
                          requests: {},
                          sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          maxCachedSessions: 100,
                          _sessionCache:
                           { map:
                              { 'spark.embiq.com:443::::::::::::::::':
                                 <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                             list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                       Server: [Function: Server],
                       createServer: [Function: createServer],
                       get: [Function: get],
                       request: [Function: request] } },
                 pathname: '/api/config/tag_positions',
                 host: 'spark.embiq.com',
                 _agentKey: 'spark.embiq.com:443::::::::::::::::',
                 encoding: null,
                 session:
                  <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
                 singleUse: true } },
           connection:
            TLSSocket {
              _tlsOptions:
               { pipe: false,
                 secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 isServer: false,
                 requestCert: true,
                 rejectUnauthorized: true,
                 session:
                  <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
                 ALPNProtocols: undefined,
                 requestOCSP: undefined },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              _SNICallback: null,
              servername: 'spark.embiq.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events:
               [Object: null prototype] {
                 close:
                  [ [Function: onSocketCloseDestroySSL],
                    { [Function: bound onceWrapper] listener: [Function] },
                    [Function: onClose],
                    [Function: socketCloseListener] ],
                 end: [Function: onReadableStreamEnd],
                 secure: [Function: onConnectSecure],
                 free: [Function: onFree],
                 agentRemove: [Function: onRemove],
                 drain: [Function: ondrain],
                 error: [Function: socketErrorListener],
                 finish:
                  { [Function: bound onceWrapper] listener: [Function: destroy] } },
              _eventsCount: 8,
              connecting: false,
              _hadError: false,
              _handle:
               TLSWrap {
                 _parent:
                  TCP {
                    reading: [Getter/Setter],
                    onread: null,
                    onconnection: null,
                    [Symbol(owner)]: [Circular] },
                 _parentWrap: undefined,
                 _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 reading: true,
                 onread: [Function: onStreamRead],
                 onhandshakestart: [Function: noop],
                 onhandshakedone: [Function: bound ],
                 onocspresponse: [Function: onocspresponse],
                 onerror: [Function: onerror],
                 [Symbol(owner)]: [Circular] },
              _parent: null,
              _host: 'spark.embiq.com',
              _readableState:
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: BufferList { head: null, tail: null, length: 0 },
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: true,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 emitClose: false,
                 autoDestroy: false,
                 destroyed: false,
                 defaultEncoding: 'utf8',
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              _maxListeners: undefined,
              _writableState:
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 finalCalled: true,
                 needDrain: false,
                 ending: true,
                 ended: true,
                 finished: false,
                 destroyed: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: false,
                 bufferProcessing: false,
                 onwrite: [Function: bound onwrite],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 1,
                 prefinished: false,
                 errorEmitted: false,
                 emitClose: false,
                 autoDestroy: false,
                 bufferedRequestCount: 0,
                 corkedRequestsFree:
                  { next:
                     { next: null,
                       entry: null,
                       finish: [Function: bound onCorkedFinish] },
                    entry: null,
                    finish: [Function: bound onCorkedFinish] } },
              writable: false,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl:
               TLSWrap {
                 _parent:
                  TCP {
                    reading: [Getter/Setter],
                    onread: null,
                    onconnection: null,
                    [Symbol(owner)]: [Circular] },
                 _parentWrap: undefined,
                 _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 reading: true,
                 onread: [Function: onStreamRead],
                 onhandshakestart: [Function: noop],
                 onhandshakedone: [Function: bound ],
                 onocspresponse: [Function: onocspresponse],
                 onerror: [Function: onerror],
                 [Symbol(owner)]: [Circular] },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular],
              [Symbol(res)]:
               TLSWrap {
                 _parent:
                  TCP {
                    reading: [Getter/Setter],
                    onread: null,
                    onconnection: null,
                    [Symbol(owner)]: [Circular] },
                 _parentWrap: undefined,
                 _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 reading: true,
                 onread: [Function: onStreamRead],
                 onhandshakestart: [Function: noop],
                 onhandshakedone: [Function: bound ],
                 onocspresponse: [Function: onocspresponse],
                 onerror: [Function: onerror],
                 [Symbol(owner)]: [Circular] },
              [Symbol(asyncId)]: 31,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]:
               { rejectUnauthorized: true,
                 ciphers:
                  'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                 checkServerIdentity: [Function: checkServerIdentity],
                 minDHSize: 1024,
                 servername: 'spark.embiq.com',
                 _defaultAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: { path: null },
                    requests: {},
                    sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    maxCachedSessions: 100,
                    _sessionCache:
                     { map:
                        { 'spark.embiq.com:443::::::::::::::::':
                           <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                       list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                 maxRedirects: 21,
                 maxBodyLength: 10485760,
                 protocol: 'https:',
                 path: null,
                 method: 'post',
                 headers:
                  { Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json;charset=utf-8',
                    'User-Agent': 'axios/0.18.0',
                    'Content-Length': 40 },
                 agent: undefined,
                 auth: undefined,
                 hostname: 'spark.embiq.com',
                 port: 443,
                 nativeProtocols:
                  { 'http:':
                     { _connectionListener: [Function: connectionListener],
                       METHODS:
                        [ 'ACL',
                          'BIND',
                          'CHECKOUT',
                          'CONNECT',
                          'COPY',
                          'DELETE',
                          'GET',
                          'HEAD',
                          'LINK',
                          'LOCK',
                          'M-SEARCH',
                          'MERGE',
                          'MKACTIVITY',
                          'MKCALENDAR',
                          'MKCOL',
                          'MOVE',
                          'NOTIFY',
                          'OPTIONS',
                          'PATCH',
                          'POST',
                          'PROPFIND',
                          'PROPPATCH',
                          'PURGE',
                          'PUT',
                          'REBIND',
                          'REPORT',
                          'SEARCH',
                          'SOURCE',
                          'SUBSCRIBE',
                          'TRACE',
                          'UNBIND',
                          'UNLINK',
                          'UNLOCK',
                          'UNSUBSCRIBE' ],
                       STATUS_CODES:
                        { '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Unordered Collection',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required' },
                       Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                       ClientRequest: [Function: ClientRequest],
                       globalAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       IncomingMessage: [Function: IncomingMessage],
                       OutgoingMessage: [Function: OutgoingMessage],
                       Server: [Function: Server],
                       ServerResponse: [Function: ServerResponse],
                       createServer: [Function: createServer],
                       get: [Function: get],
                       request: [Function: request] },
                    'https:':
                     { Agent: [Function: Agent],
                       globalAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: { path: null },
                          requests: {},
                          sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          maxCachedSessions: 100,
                          _sessionCache:
                           { map:
                              { 'spark.embiq.com:443::::::::::::::::':
                                 <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                             list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                       Server: [Function: Server],
                       createServer: [Function: createServer],
                       get: [Function: get],
                       request: [Function: request] } },
                 pathname: '/api/config/tag_positions',
                 host: 'spark.embiq.com',
                 _agentKey: 'spark.embiq.com:443::::::::::::::::',
                 encoding: null,
                 session:
                  <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
                 singleUse: true } },
           httpVersionMajor: 1,
           httpVersionMinor: 1,
           httpVersion: '1.1',
           complete: true,
           headers:
            { server: 'nginx',
              date: 'Tue, 19 Feb 2019 09:53:02 GMT',
              'content-type': 'text/html',
              'content-length': '27',
              connection: 'close',
              'x-frame-options': 'SAMEORIGIN',
              vary: 'Origin' },
           rawHeaders:
            [ 'Server',
              'nginx',
              'Date',
              'Tue, 19 Feb 2019 09:53:02 GMT',
              'Content-Type',
              'text/html',
              'Content-Length',
              '27',
              'Connection',
              'close',
              'X-Frame-Options',
              'SAMEORIGIN',
              'Vary',
              'Origin' ],
           trailers: {},
           rawTrailers: [],
           aborted: false,
           upgrade: false,
           url: '',
           method: null,
           statusCode: 500,
           statusMessage: 'Internal Server Error',
           client:
            TLSSocket {
              _tlsOptions:
               { pipe: false,
                 secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 isServer: false,
                 requestCert: true,
                 rejectUnauthorized: true,
                 session:
                  <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
                 ALPNProtocols: undefined,
                 requestOCSP: undefined },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              _SNICallback: null,
              servername: 'spark.embiq.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events:
               [Object: null prototype] {
                 close:
                  [ [Function: onSocketCloseDestroySSL],
                    { [Function: bound onceWrapper] listener: [Function] },
                    [Function: onClose],
                    [Function: socketCloseListener] ],
                 end: [Function: onReadableStreamEnd],
                 secure: [Function: onConnectSecure],
                 free: [Function: onFree],
                 agentRemove: [Function: onRemove],
                 drain: [Function: ondrain],
                 error: [Function: socketErrorListener],
                 finish:
                  { [Function: bound onceWrapper] listener: [Function: destroy] } },
              _eventsCount: 8,
              connecting: false,
              _hadError: false,
              _handle:
               TLSWrap {
                 _parent:
                  TCP {
                    reading: [Getter/Setter],
                    onread: null,
                    onconnection: null,
                    [Symbol(owner)]: [Circular] },
                 _parentWrap: undefined,
                 _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 reading: true,
                 onread: [Function: onStreamRead],
                 onhandshakestart: [Function: noop],
                 onhandshakedone: [Function: bound ],
                 onocspresponse: [Function: onocspresponse],
                 onerror: [Function: onerror],
                 [Symbol(owner)]: [Circular] },
              _parent: null,
              _host: 'spark.embiq.com',
              _readableState:
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: BufferList { head: null, tail: null, length: 0 },
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: true,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 emitClose: false,
                 autoDestroy: false,
                 destroyed: false,
                 defaultEncoding: 'utf8',
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              _maxListeners: undefined,
              _writableState:
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 finalCalled: true,
                 needDrain: false,
                 ending: true,
                 ended: true,
                 finished: false,
                 destroyed: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: false,
                 bufferProcessing: false,
                 onwrite: [Function: bound onwrite],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 1,
                 prefinished: false,
                 errorEmitted: false,
                 emitClose: false,
                 autoDestroy: false,
                 bufferedRequestCount: 0,
                 corkedRequestsFree:
                  { next:
                     { next: null,
                       entry: null,
                       finish: [Function: bound onCorkedFinish] },
                    entry: null,
                    finish: [Function: bound onCorkedFinish] } },
              writable: false,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl:
               TLSWrap {
                 _parent:
                  TCP {
                    reading: [Getter/Setter],
                    onread: null,
                    onconnection: null,
                    [Symbol(owner)]: [Circular] },
                 _parentWrap: undefined,
                 _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 reading: true,
                 onread: [Function: onStreamRead],
                 onhandshakestart: [Function: noop],
                 onhandshakedone: [Function: bound ],
                 onocspresponse: [Function: onocspresponse],
                 onerror: [Function: onerror],
                 [Symbol(owner)]: [Circular] },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular],
              [Symbol(res)]:
               TLSWrap {
                 _parent:
                  TCP {
                    reading: [Getter/Setter],
                    onread: null,
                    onconnection: null,
                    [Symbol(owner)]: [Circular] },
                 _parentWrap: undefined,
                 _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                 reading: true,
                 onread: [Function: onStreamRead],
                 onhandshakestart: [Function: noop],
                 onhandshakedone: [Function: bound ],
                 onocspresponse: [Function: onocspresponse],
                 onerror: [Function: onerror],
                 [Symbol(owner)]: [Circular] },
              [Symbol(asyncId)]: 31,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]:
               { rejectUnauthorized: true,
                 ciphers:
                  'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                 checkServerIdentity: [Function: checkServerIdentity],
                 minDHSize: 1024,
                 servername: 'spark.embiq.com',
                 _defaultAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: { path: null },
                    requests: {},
                    sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    maxCachedSessions: 100,
                    _sessionCache:
                     { map:
                        { 'spark.embiq.com:443::::::::::::::::':
                           <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                       list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                 maxRedirects: 21,
                 maxBodyLength: 10485760,
                 protocol: 'https:',
                 path: null,
                 method: 'post',
                 headers:
                  { Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json;charset=utf-8',
                    'User-Agent': 'axios/0.18.0',
                    'Content-Length': 40 },
                 agent: undefined,
                 auth: undefined,
                 hostname: 'spark.embiq.com',
                 port: 443,
                 nativeProtocols:
                  { 'http:':
                     { _connectionListener: [Function: connectionListener],
                       METHODS:
                        [ 'ACL',
                          'BIND',
                          'CHECKOUT',
                          'CONNECT',
                          'COPY',
                          'DELETE',
                          'GET',
                          'HEAD',
                          'LINK',
                          'LOCK',
                          'M-SEARCH',
                          'MERGE',
                          'MKACTIVITY',
                          'MKCALENDAR',
                          'MKCOL',
                          'MOVE',
                          'NOTIFY',
                          'OPTIONS',
                          'PATCH',
                          'POST',
                          'PROPFIND',
                          'PROPPATCH',
                          'PURGE',
                          'PUT',
                          'REBIND',
                          'REPORT',
                          'SEARCH',
                          'SOURCE',
                          'SUBSCRIBE',
                          'TRACE',
                          'UNBIND',
                          'UNLINK',
                          'UNLOCK',
                          'UNSUBSCRIBE' ],
                       STATUS_CODES:
                        { '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Unordered Collection',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required' },
                       Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                       ClientRequest: [Function: ClientRequest],
                       globalAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       IncomingMessage: [Function: IncomingMessage],
                       OutgoingMessage: [Function: OutgoingMessage],
                       Server: [Function: Server],
                       ServerResponse: [Function: ServerResponse],
                       createServer: [Function: createServer],
                       get: [Function: get],
                       request: [Function: request] },
                    'https:':
                     { Agent: [Function: Agent],
                       globalAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: { path: null },
                          requests: {},
                          sockets: { 'spark.embiq.com:443::::::::::::::::': [ [Circular] ] },
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          maxCachedSessions: 100,
                          _sessionCache:
                           { map:
                              { 'spark.embiq.com:443::::::::::::::::':
                                 <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                             list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                       Server: [Function: Server],
                       createServer: [Function: createServer],
                       get: [Function: get],
                       request: [Function: request] } },
                 pathname: '/api/config/tag_positions',
                 host: 'spark.embiq.com',
                 _agentKey: 'spark.embiq.com:443::::::::::::::::',
                 encoding: null,
                 session:
                  <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
                 singleUse: true } },
           _consuming: false,
           _dumped: false,
           req: [Circular],
           responseUrl: 'https://spark.embiq.com/api/config/tag_positions',
           redirects: [] },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        _redirectable:
         Writable {
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: true,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: true,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree:
               { next: null,
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: true,
           _events:
            [Object: null prototype] {
              response: [Function: handleResponse],
              error: [Function: handleRequestError] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _options:
            { maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: '/api/config/tag_positions',
              method: 'post',
              headers:
               { Accept: 'application/json, text/plain, */*',
                 'Content-Type': 'application/json;charset=utf-8',
                 'User-Agent': 'axios/0.18.0',
                 'Content-Length': 40 },
              agent: undefined,
              auth: undefined,
              hostname: 'spark.embiq.com',
              port: null,
              nativeProtocols:
               { 'http:':
                  { _connectionListener: [Function: connectionListener],
                    METHODS:
                     [ 'ACL',
                       'BIND',
                       'CHECKOUT',
                       'CONNECT',
                       'COPY',
                       'DELETE',
                       'GET',
                       'HEAD',
                       'LINK',
                       'LOCK',
                       'M-SEARCH',
                       'MERGE',
                       'MKACTIVITY',
                       'MKCALENDAR',
                       'MKCOL',
                       'MOVE',
                       'NOTIFY',
                       'OPTIONS',
                       'PATCH',
                       'POST',
                       'PROPFIND',
                       'PROPPATCH',
                       'PURGE',
                       'PUT',
                       'REBIND',
                       'REPORT',
                       'SEARCH',
                       'SOURCE',
                       'SUBSCRIBE',
                       'TRACE',
                       'UNBIND',
                       'UNLINK',
                       'UNLOCK',
                       'UNSUBSCRIBE' ],
                    STATUS_CODES:
                     { '100': 'Continue',
                       '101': 'Switching Protocols',
                       '102': 'Processing',
                       '103': 'Early Hints',
                       '200': 'OK',
                       '201': 'Created',
                       '202': 'Accepted',
                       '203': 'Non-Authoritative Information',
                       '204': 'No Content',
                       '205': 'Reset Content',
                       '206': 'Partial Content',
                       '207': 'Multi-Status',
                       '208': 'Already Reported',
                       '226': 'IM Used',
                       '300': 'Multiple Choices',
                       '301': 'Moved Permanently',
                       '302': 'Found',
                       '303': 'See Other',
                       '304': 'Not Modified',
                       '305': 'Use Proxy',
                       '307': 'Temporary Redirect',
                       '308': 'Permanent Redirect',
                       '400': 'Bad Request',
                       '401': 'Unauthorized',
                       '402': 'Payment Required',
                       '403': 'Forbidden',
                       '404': 'Not Found',
                       '405': 'Method Not Allowed',
                       '406': 'Not Acceptable',
                       '407': 'Proxy Authentication Required',
                       '408': 'Request Timeout',
                       '409': 'Conflict',
                       '410': 'Gone',
                       '411': 'Length Required',
                       '412': 'Precondition Failed',
                       '413': 'Payload Too Large',
                       '414': 'URI Too Long',
                       '415': 'Unsupported Media Type',
                       '416': 'Range Not Satisfiable',
                       '417': 'Expectation Failed',
                       '418': "I'm a Teapot",
                       '421': 'Misdirected Request',
                       '422': 'Unprocessable Entity',
                       '423': 'Locked',
                       '424': 'Failed Dependency',
                       '425': 'Unordered Collection',
                       '426': 'Upgrade Required',
                       '428': 'Precondition Required',
                       '429': 'Too Many Requests',
                       '431': 'Request Header Fields Too Large',
                       '451': 'Unavailable For Legal Reasons',
                       '500': 'Internal Server Error',
                       '501': 'Not Implemented',
                       '502': 'Bad Gateway',
                       '503': 'Service Unavailable',
                       '504': 'Gateway Timeout',
                       '505': 'HTTP Version Not Supported',
                       '506': 'Variant Also Negotiates',
                       '507': 'Insufficient Storage',
                       '508': 'Loop Detected',
                       '509': 'Bandwidth Limit Exceeded',
                       '510': 'Not Extended',
                       '511': 'Network Authentication Required' },
                    Agent: { [Function: Agent] defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] },
                 'https:':
                  { Agent: [Function: Agent],
                    globalAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 443,
                       protocol: 'https:',
                       options: { path: null },
                       requests: {},
                       sockets:
                        { 'spark.embiq.com:443::::::::::::::::':
                           [ TLSSocket {
                               _tlsOptions:
                                { pipe: false,
                                  secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                                  isServer: false,
                                  requestCert: true,
                                  rejectUnauthorized: true,
                                  session:
                                   <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
                                  ALPNProtocols: undefined,
                                  requestOCSP: undefined },
                               _secureEstablished: true,
                               _securePending: false,
                               _newSessionPending: false,
                               _controlReleased: true,
                               _SNICallback: null,
                               servername: 'spark.embiq.com',
                               alpnProtocol: false,
                               authorized: true,
                               authorizationError: null,
                               encrypted: true,
                               _events:
                                [Object: null prototype] {
                                  close:
                                   [ [Function: onSocketCloseDestroySSL],
                                     { [Function: bound onceWrapper] listener: [Function] },
                                     [Function: onClose],
                                     [Function: socketCloseListener] ],
                                  end: [Function: onReadableStreamEnd],
                                  secure: [Function: onConnectSecure],
                                  free: [Function: onFree],
                                  agentRemove: [Function: onRemove],
                                  drain: [Function: ondrain],
                                  error: [Function: socketErrorListener],
                                  finish:
                                   { [Function: bound onceWrapper] listener: [Function: destroy] } },
                               _eventsCount: 8,
                               connecting: false,
                               _hadError: false,
                               _handle:
                                TLSWrap {
                                  _parent:
                                   TCP {
                                     reading: [Getter/Setter],
                                     onread: null,
                                     onconnection: null,
                                     [Symbol(owner)]: [Circular] },
                                  _parentWrap: undefined,
                                  _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                                  reading: true,
                                  onread: [Function: onStreamRead],
                                  onhandshakestart: [Function: noop],
                                  onhandshakedone: [Function: bound ],
                                  onocspresponse: [Function: onocspresponse],
                                  onerror: [Function: onerror],
                                  [Symbol(owner)]: [Circular] },
                               _parent: null,
                               _host: 'spark.embiq.com',
                               _readableState:
                                ReadableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  buffer: BufferList { head: null, tail: null, length: 0 },
                                  length: 0,
                                  pipes: null,
                                  pipesCount: 0,
                                  flowing: true,
                                  ended: false,
                                  endEmitted: false,
                                  reading: true,
                                  sync: false,
                                  needReadable: true,
                                  emittedReadable: false,
                                  readableListening: false,
                                  resumeScheduled: false,
                                  emitClose: false,
                                  autoDestroy: false,
                                  destroyed: false,
                                  defaultEncoding: 'utf8',
                                  awaitDrain: 0,
                                  readingMore: false,
                                  decoder: null,
                                  encoding: null },
                               readable: true,
                               _maxListeners: undefined,
                               _writableState:
                                WritableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  finalCalled: true,
                                  needDrain: false,
                                  ending: true,
                                  ended: true,
                                  finished: false,
                                  destroyed: false,
                                  decodeStrings: false,
                                  defaultEncoding: 'utf8',
                                  length: 0,
                                  writing: false,
                                  corked: 0,
                                  sync: false,
                                  bufferProcessing: false,
                                  onwrite: [Function: bound onwrite],
                                  writecb: null,
                                  writelen: 0,
                                  bufferedRequest: null,
                                  lastBufferedRequest: null,
                                  pendingcb: 1,
                                  prefinished: false,
                                  errorEmitted: false,
                                  emitClose: false,
                                  autoDestroy: false,
                                  bufferedRequestCount: 0,
                                  corkedRequestsFree:
                                   { next:
                                      { next: null,
                                        entry: null,
                                        finish: [Function: bound onCorkedFinish] },
                                     entry: null,
                                     finish: [Function: bound onCorkedFinish] } },
                               writable: false,
                               allowHalfOpen: false,
                               _sockname: null,
                               _pendingData: null,
                               _pendingEncoding: '',
                               server: undefined,
                               _server: null,
                               ssl:
                                TLSWrap {
                                  _parent:
                                   TCP {
                                     reading: [Getter/Setter],
                                     onread: null,
                                     onconnection: null,
                                     [Symbol(owner)]: [Circular] },
                                  _parentWrap: undefined,
                                  _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                                  reading: true,
                                  onread: [Function: onStreamRead],
                                  onhandshakestart: [Function: noop],
                                  onhandshakedone: [Function: bound ],
                                  onocspresponse: [Function: onocspresponse],
                                  onerror: [Function: onerror],
                                  [Symbol(owner)]: [Circular] },
                               _requestCert: true,
                               _rejectUnauthorized: true,
                               parser: null,
                               _httpMessage: [Circular],
                               [Symbol(res)]:
                                TLSWrap {
                                  _parent:
                                   TCP {
                                     reading: [Getter/Setter],
                                     onread: null,
                                     onconnection: null,
                                     [Symbol(owner)]: [Circular] },
                                  _parentWrap: undefined,
                                  _secureContext: SecureContext { context: SecureContext {}, singleUse: true },
                                  reading: true,
                                  onread: [Function: onStreamRead],
                                  onhandshakestart: [Function: noop],
                                  onhandshakedone: [Function: bound ],
                                  onocspresponse: [Function: onocspresponse],
                                  onerror: [Function: onerror],
                                  [Symbol(owner)]: [Circular] },
                               [Symbol(asyncId)]: 31,
                               [Symbol(lastWriteQueueSize)]: 0,
                               [Symbol(timeout)]: null,
                               [Symbol(kBytesRead)]: 0,
                               [Symbol(kBytesWritten)]: 0,
                               [Symbol(connect-options)]:
                                { rejectUnauthorized: true,
                                  ciphers:
                                   'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                                  checkServerIdentity: [Function: checkServerIdentity],
                                  minDHSize: 1024,
                                  servername: 'spark.embiq.com',
                                  _defaultAgent: [Circular],
                                  maxRedirects: 21,
                                  maxBodyLength: 10485760,
                                  protocol: 'https:',
                                  path: null,
                                  method: 'post',
                                  headers:
                                   { Accept: 'application/json, text/plain, */*',
                                     'Content-Type': 'application/json;charset=utf-8',
                                     'User-Agent': 'axios/0.18.0',
                                     'Content-Length': 40 },
                                  agent: undefined,
                                  auth: undefined,
                                  hostname: 'spark.embiq.com',
                                  port: 443,
                                  nativeProtocols: [Circular],
                                  pathname: '/api/config/tag_positions',
                                  host: 'spark.embiq.com',
                                  _agentKey: 'spark.embiq.com:443::::::::::::::::',
                                  encoding: null,
                                  session:
                                   <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes>,
                                  singleUse: true } } ] },
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: false,
                       maxSockets: Infinity,
                       maxFreeSockets: 256,
                       maxCachedSessions: 100,
                       _sessionCache:
                        { map:
                           { 'spark.embiq.com:443::::::::::::::::':
                              <Buffer 30 82 09 5e 02 01 01 02 02 03 03 04 02 c0 30 04 20 30 77 45 e2 ca 09 cc 22 61 b8 44 3b 2c f7 0f 0e 27 8f e3 0b ac 75 9b ce f2 ed 79 91 f6 32 f5 6a 04 ... 2352 more bytes> },
                          list: [ 'spark.embiq.com:443::::::::::::::::' ] } },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request] } },
              pathname: '/api/config/tag_positions' },
           _ended: true,
           _ending: true,
           _redirectCount: 0,
           _redirects: [],
           _requestBodyLength: 40,
           _requestBodyBuffers: [],
           _onNativeResponse: [Function],
           _currentRequest: [Circular],
           _currentUrl: 'https://spark.embiq.com/api/config/tag_positions' },
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]:
         [Object: null prototype] {
           accept: [ 'Accept', 'application/json, text/plain, */*' ],
           'content-type': [ 'Content-Type', 'application/json;charset=utf-8' ],
           'user-agent': [ 'User-Agent', 'axios/0.18.0' ],
           'content-length': [ 'Content-Length', 40 ],
           host: [ 'Host', 'spark.embiq.com' ] } },
     data: '<h1>Server Error (500)</h1>' } }
